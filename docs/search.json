[
  {
    "objectID": "challenge04-solution.html",
    "href": "challenge04-solution.html",
    "title": "Challenge 04 – Solution",
    "section": "",
    "text": "Datensatz pivotieren\nAufbauend auf dem Ergebnis der letzten Challenge:\n\nListen Sie die Spaltennamen auf.\nGeben Sie Arten von Spaltennamen an, z.b. actionDetails_482_timestamp und actionDetails_327_subtitle und actionDetails_327_timestampe wären 2 verschiedene Typen von Spalten: Timestamp und Subtitle.\nPivotieren Sie den Datensatz in das Langformat. Aber nehmen Sie idvisit vom Pivotieren aus; d.h. Sie nehmen alle Spalten bis auf idvisit in das Pivotieren auf. Es sollen also drei Spalten resultieren: idvisit, name und value.\nBegrenzen Sie beim Pivotieren die Spalten auf die Spaltentypen mit dem Namen vom Typ subtitle sowie idvisit; d.h. Sie pivotieren nur diese genannten Spaltentypen. Es sollen also drei Spalten resultieren: idvisit, name und value.\nPrüfen Sie, ob es stimmt, dass in der Spalte name die enthaltene Zahl die einzige Information ist. Anders gesagt: Außer der Zahl in den Werten name sind alle Teile der Werte konstant.\nDie Spalten, die die Werte wie actionDetails_0_subtitle nennen Sie in id um. Aus den Werten (wie actionDetails_0_subtitle) extrahieren Sie die Zahl in der Mitte des Textes (den Rest des Textes löschen).\n\nTipp: pivot_longer aus dem Paket tidyr könnte hilfreich sein.\nAusgabeformat: Quarto (Bericht)\n\n\n\n\n\n\nlibrary(tidyverse)\n#library(stringr)  # Strings verarbeiten\nlibrary(here)  # liest aktuelles Verzeichnis aus\nlibrary(lubridate)  # Mit Zeitangaben arbeiten\n\nWir laden den Datensatz, wie im letzten Schritt herausgegangen:\n\nd &lt;- read_rds(file = paste0(here(), \"/\", \"data-processed/d_no_students.rds\"))\n\n\n\n\n\nnames(d) |&gt; \n  head()\n## [1] \"idVisit\"                  \"actionDetails_0_subtitle\"\n## [3] \"actionDetails_1_subtitle\" \"actionDetails_2_subtitle\"\n## [5] \"actionDetails_3_subtitle\" \"actionDetails_4_subtitle\"\n\nEs gibt 1004 Spalten.\n\n\n\n\nnames(d) |&gt; \n  str_extract(\"[^_]+$\") |&gt; \n  unique() |&gt; \n  head()\n## [1] \"idVisit\"              \"subtitle\"             \"timestamp\"           \n## [4] \"lastActionTimestamp\"  \"serverTimestamp\"      \"firstActionTimestamp\"\n\n\n\n\nIn das Langformat bringen wir alle Spalten, die nicht idVisit heißen.\n\nd_long &lt;-\n  d |&gt; \n  mutate(across(everything(), as.character)) |&gt; \n  pivot_longer(-idVisit)\n\nCheck:\n\ntail(d_long, n = 100)\n## # A tibble: 100 × 3\n##    idVisit name                        value\n##    &lt;chr&gt;   &lt;chr&gt;                       &lt;chr&gt;\n##  1 2474    actionDetails_400_timestamp &lt;NA&gt; \n##  2 2474    actionDetails_401_timestamp &lt;NA&gt; \n##  3 2474    actionDetails_402_timestamp &lt;NA&gt; \n##  4 2474    actionDetails_403_timestamp &lt;NA&gt; \n##  5 2474    actionDetails_404_timestamp &lt;NA&gt; \n##  6 2474    actionDetails_405_timestamp &lt;NA&gt; \n##  7 2474    actionDetails_406_timestamp &lt;NA&gt; \n##  8 2474    actionDetails_407_timestamp &lt;NA&gt; \n##  9 2474    actionDetails_408_timestamp &lt;NA&gt; \n## 10 2474    actionDetails_409_timestamp &lt;NA&gt; \n## # ℹ 90 more rows\n\n\n\n\n\nd_long_small &lt;-\n  d |&gt; \n  select(idVisit, contains(\"subtitle\")) |&gt; \n  mutate(across(everything(), as.character)) |&gt; \n  pivot_longer(-idVisit)\n\n\nd_long_small |&gt; \n  head(10)\n## # A tibble: 10 × 3\n##    idVisit name                     value                                       \n##    &lt;chr&gt;   &lt;chr&gt;                    &lt;chr&gt;                                       \n##  1 2352    actionDetails_0_subtitle https://141.75.89.55/login?evalId=none&user…\n##  2 2352    actionDetails_1_subtitle &lt;NA&gt;                                        \n##  3 2352    actionDetails_2_subtitle &lt;NA&gt;                                        \n##  4 2352    actionDetails_3_subtitle &lt;NA&gt;                                        \n##  5 2352    actionDetails_4_subtitle &lt;NA&gt;                                        \n##  6 2352    actionDetails_5_subtitle &lt;NA&gt;                                        \n##  7 2352    actionDetails_6_subtitle &lt;NA&gt;                                        \n##  8 2352    actionDetails_7_subtitle &lt;NA&gt;                                        \n##  9 2352    actionDetails_8_subtitle &lt;NA&gt;                                        \n## 10 2352    actionDetails_9_subtitle &lt;NA&gt;\n\n\n\n\n\nd_long_small |&gt; \n  select(name) |&gt; \n  mutate(name = str_remove(name, \"\\\\d+\")) |&gt; \n  distinct()\n## # A tibble: 1 × 1\n##   name                   \n##   &lt;chr&gt;                  \n## 1 actionDetails__subtitle\n\nEs gibt keine anderen Informationen als die Zahl in dieser Spalte.\n\n\n\n\nd_long_small_id &lt;- \nd_long_small |&gt; \n  rename(id = name) |&gt; \n  mutate(id = str_extract(id, \"\\\\d+\"))\n\n\nhead(d_long_small_id)\n## # A tibble: 6 × 3\n##   idVisit id    value                                                           \n##   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;                                                           \n## 1 2352    0     https://141.75.89.55/login?evalId=none&user=undefined&role=unde…\n## 2 2352    1     &lt;NA&gt;                                                            \n## 3 2352    2     &lt;NA&gt;                                                            \n## 4 2352    3     &lt;NA&gt;                                                            \n## 5 2352    4     &lt;NA&gt;                                                            \n## 6 2352    5     &lt;NA&gt;\n\n\n\n\n\nd_long_small_id_values &lt;- \nd_long_small_id |&gt; \n  select(value) |&gt; \n  drop_na() |&gt; \n  pull(value)\n\nLieber nicht nach den uniquen Werten fragen, es sind sehr viele, das dauert…\n\nunique(d_long_small_id_values)\n\n\n\n\n\n\n\n\nSpeichern wir das resultierende Objekt ab, damit wir für künftige Aufgaben damit weiterarbeiten können.\n\nwrite_rds(d_long_small_id, \"data-processed/d_long_small_id.rds\")\nwrite_csv(d_long_small_id, \"data-processed/d_long_small_id.csv\")",
    "crumbs": [
      "Lösung 04"
    ]
  },
  {
    "objectID": "challenge04-solution.html#aufgaben",
    "href": "challenge04-solution.html#aufgaben",
    "title": "Challenge 04 – Solution",
    "section": "",
    "text": "Datensatz pivotieren\nAufbauend auf dem Ergebnis der letzten Challenge:\n\nListen Sie die Spaltennamen auf.\nGeben Sie Arten von Spaltennamen an, z.b. actionDetails_482_timestamp und actionDetails_327_subtitle und actionDetails_327_timestampe wären 2 verschiedene Typen von Spalten: Timestamp und Subtitle.\nPivotieren Sie den Datensatz in das Langformat. Aber nehmen Sie idvisit vom Pivotieren aus; d.h. Sie nehmen alle Spalten bis auf idvisit in das Pivotieren auf. Es sollen also drei Spalten resultieren: idvisit, name und value.\nBegrenzen Sie beim Pivotieren die Spalten auf die Spaltentypen mit dem Namen vom Typ subtitle sowie idvisit; d.h. Sie pivotieren nur diese genannten Spaltentypen. Es sollen also drei Spalten resultieren: idvisit, name und value.\nPrüfen Sie, ob es stimmt, dass in der Spalte name die enthaltene Zahl die einzige Information ist. Anders gesagt: Außer der Zahl in den Werten name sind alle Teile der Werte konstant.\nDie Spalten, die die Werte wie actionDetails_0_subtitle nennen Sie in id um. Aus den Werten (wie actionDetails_0_subtitle) extrahieren Sie die Zahl in der Mitte des Textes (den Rest des Textes löschen).\n\nTipp: pivot_longer aus dem Paket tidyr könnte hilfreich sein.\nAusgabeformat: Quarto (Bericht)",
    "crumbs": [
      "Lösung 04"
    ]
  },
  {
    "objectID": "challenge04-solution.html#lösungen",
    "href": "challenge04-solution.html#lösungen",
    "title": "Challenge 04 – Solution",
    "section": "",
    "text": "library(tidyverse)\n#library(stringr)  # Strings verarbeiten\nlibrary(here)  # liest aktuelles Verzeichnis aus\nlibrary(lubridate)  # Mit Zeitangaben arbeiten\n\nWir laden den Datensatz, wie im letzten Schritt herausgegangen:\n\nd &lt;- read_rds(file = paste0(here(), \"/\", \"data-processed/d_no_students.rds\"))\n\n\n\n\n\nnames(d) |&gt; \n  head()\n## [1] \"idVisit\"                  \"actionDetails_0_subtitle\"\n## [3] \"actionDetails_1_subtitle\" \"actionDetails_2_subtitle\"\n## [5] \"actionDetails_3_subtitle\" \"actionDetails_4_subtitle\"\n\nEs gibt 1004 Spalten.\n\n\n\n\nnames(d) |&gt; \n  str_extract(\"[^_]+$\") |&gt; \n  unique() |&gt; \n  head()\n## [1] \"idVisit\"              \"subtitle\"             \"timestamp\"           \n## [4] \"lastActionTimestamp\"  \"serverTimestamp\"      \"firstActionTimestamp\"\n\n\n\n\nIn das Langformat bringen wir alle Spalten, die nicht idVisit heißen.\n\nd_long &lt;-\n  d |&gt; \n  mutate(across(everything(), as.character)) |&gt; \n  pivot_longer(-idVisit)\n\nCheck:\n\ntail(d_long, n = 100)\n## # A tibble: 100 × 3\n##    idVisit name                        value\n##    &lt;chr&gt;   &lt;chr&gt;                       &lt;chr&gt;\n##  1 2474    actionDetails_400_timestamp &lt;NA&gt; \n##  2 2474    actionDetails_401_timestamp &lt;NA&gt; \n##  3 2474    actionDetails_402_timestamp &lt;NA&gt; \n##  4 2474    actionDetails_403_timestamp &lt;NA&gt; \n##  5 2474    actionDetails_404_timestamp &lt;NA&gt; \n##  6 2474    actionDetails_405_timestamp &lt;NA&gt; \n##  7 2474    actionDetails_406_timestamp &lt;NA&gt; \n##  8 2474    actionDetails_407_timestamp &lt;NA&gt; \n##  9 2474    actionDetails_408_timestamp &lt;NA&gt; \n## 10 2474    actionDetails_409_timestamp &lt;NA&gt; \n## # ℹ 90 more rows\n\n\n\n\n\nd_long_small &lt;-\n  d |&gt; \n  select(idVisit, contains(\"subtitle\")) |&gt; \n  mutate(across(everything(), as.character)) |&gt; \n  pivot_longer(-idVisit)\n\n\nd_long_small |&gt; \n  head(10)\n## # A tibble: 10 × 3\n##    idVisit name                     value                                       \n##    &lt;chr&gt;   &lt;chr&gt;                    &lt;chr&gt;                                       \n##  1 2352    actionDetails_0_subtitle https://141.75.89.55/login?evalId=none&user…\n##  2 2352    actionDetails_1_subtitle &lt;NA&gt;                                        \n##  3 2352    actionDetails_2_subtitle &lt;NA&gt;                                        \n##  4 2352    actionDetails_3_subtitle &lt;NA&gt;                                        \n##  5 2352    actionDetails_4_subtitle &lt;NA&gt;                                        \n##  6 2352    actionDetails_5_subtitle &lt;NA&gt;                                        \n##  7 2352    actionDetails_6_subtitle &lt;NA&gt;                                        \n##  8 2352    actionDetails_7_subtitle &lt;NA&gt;                                        \n##  9 2352    actionDetails_8_subtitle &lt;NA&gt;                                        \n## 10 2352    actionDetails_9_subtitle &lt;NA&gt;\n\n\n\n\n\nd_long_small |&gt; \n  select(name) |&gt; \n  mutate(name = str_remove(name, \"\\\\d+\")) |&gt; \n  distinct()\n## # A tibble: 1 × 1\n##   name                   \n##   &lt;chr&gt;                  \n## 1 actionDetails__subtitle\n\nEs gibt keine anderen Informationen als die Zahl in dieser Spalte.\n\n\n\n\nd_long_small_id &lt;- \nd_long_small |&gt; \n  rename(id = name) |&gt; \n  mutate(id = str_extract(id, \"\\\\d+\"))\n\n\nhead(d_long_small_id)\n## # A tibble: 6 × 3\n##   idVisit id    value                                                           \n##   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;                                                           \n## 1 2352    0     https://141.75.89.55/login?evalId=none&user=undefined&role=unde…\n## 2 2352    1     &lt;NA&gt;                                                            \n## 3 2352    2     &lt;NA&gt;                                                            \n## 4 2352    3     &lt;NA&gt;                                                            \n## 5 2352    4     &lt;NA&gt;                                                            \n## 6 2352    5     &lt;NA&gt;\n\n\n\n\n\nd_long_small_id_values &lt;- \nd_long_small_id |&gt; \n  select(value) |&gt; \n  drop_na() |&gt; \n  pull(value)\n\nLieber nicht nach den uniquen Werten fragen, es sind sehr viele, das dauert…\n\nunique(d_long_small_id_values)",
    "crumbs": [
      "Lösung 04"
    ]
  },
  {
    "objectID": "challenge04-solution.html#fazit-1",
    "href": "challenge04-solution.html#fazit-1",
    "title": "Challenge 04 – Solution",
    "section": "",
    "text": "Speichern wir das resultierende Objekt ab, damit wir für künftige Aufgaben damit weiterarbeiten können.\n\nwrite_rds(d_long_small_id, \"data-processed/d_long_small_id.rds\")\nwrite_csv(d_long_small_id, \"data-processed/d_long_small_id.csv\")",
    "crumbs": [
      "Lösung 04"
    ]
  },
  {
    "objectID": "einstieg.html",
    "href": "einstieg.html",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Benötigte R-Pakete für dieses Kapitel:\n\nlibrary(tidyverse)\nlibrary(here)\n\n\n\n\n\n\nSie können Funktionen, in R schreiben.\nSie können Datensätze vom Lang- und Breit-Format wechseln.\nSie können Wiederholungsstrukturen wie Mapping-Funktionen anwenden.\nSie können eine dplyr-Funktion auf mehrere Spalten gleichzeitig anwenden.\nSie können Textdaten analysieren.\nSie können mit Pfaden (relativ und absolut) umgehen.\n\n\n\n\nMachen Sie sich mit den Grundlagen von R vertraut. Die Grundlagen von R können z.B. im Online-Buch ‘Statistik1’, Kapitel ‘Daten einlesen’ wiederholt werden.\n\n\n\n\nNäheres zu Objekttypen findet sich in Sauer (2019), Kap. 5.2.\n\n\nIn R ist praktisch alles ein Objekt.\n\nDefinition 1 (Objekt (Informatik)) Ein Objekt meint ein im Computerspeicher repräsentiertes Ding, etwa eine Tabelle.\\(\\square\\)\n\n\nBeispiel 1 (Beispiele für Objekte) Vektoren und Dataframes (Tibbles) sind die vielleicht gängigsten Objektarten in R (vgl. Abbildung 1), aus Sauer (2019)).\\(\\square\\)\n\n\n\n\n\n\n\nAbbildung 1: Zentrale Objektarten in R\n\n\n\nEs gibt in R keine (Objekte für) Skalare (einzelne Zahlen). Stattdessen nutzt R Vektoren der Länge 1.\nEin nützliches Schema stammt aus Wickham, Çetinkaya-Rundel, und Grolemund (2023), s. Abbildung 2).\n\n\n\n\n\n\nAbbildung 2: Objektarten hierarchisch gegliedert\n\n\n\n\n\n\nUnter homogenen Objektiven verstehen wir Datenstrukturen, die nur eine Art von Daten (wie Text oder Ganze Zahlen) fassen. Sonstige Objekte nennen wir heterogen.\n\nHomogene Objekte\n\nVektoren\nMatrizen\n\nHeterogen\n\nListe\nDataframes (Tibbles)\n\n\n\n\nVektoren sind insofern zentral in R, als dass die übrigen Datenstrukturen auf ihnen aufbauen, vgl. Abbildung 3 aus Sauer (2019).\nReine (atomare) Vektoren in R sind eine geordnete Liste von Daten eines Typs.\n\n\n\n\n\n\nAbbildung 3: Vektoren stehen im Zentrum der Datenstrukturen in R\n\n\n\n\nein_vektor &lt;- c(1, 2, 3)\nnoch_ein_vektor &lt;- c(\"A\", \"B\", \"C\")\nlogischer_vektor &lt;- c(TRUE, FALSE, TRUE)\n\nMit str() kann man sich die Struktur eines Objektsausgeben lassen:\n\nstr(ein_vektor)\n##  num [1:3] 1 2 3\nstr(noch_ein_vektor)\n##  chr [1:3] \"A\" \"B\" \"C\"\nstr(logischer_vektor)\n##  logi [1:3] TRUE FALSE TRUE\n\nVektoren können von folgenden Typen sein:\n\nKommazahlen ( double) genannt\nGanzzahlig (integer, auch mit L für Long abgekürzt)\nText (´character`, String)\nlogische Ausdrücke (logical oder lgl) mit TRUE oder FALSE\n\nKommazahlen und Ganze Zahlen zusammen bilden den Typ numeric (numerisch) in R.\nDen Typ eines Vektors kann man mit typeof() ausgeben lassen:\n\ntypeof(ein_vektor)\n## [1] \"double\"\n\n\n\n\n\nsex &lt;- factor(c(\"Mann\", \"Frau\", \"Frau\"))\n\nInteressant:\n\nstr(sex)\n##  Factor w/ 2 levels \"Frau\",\"Mann\": 2 1 1\n\nVertiefende Informationen findet sich in Wickham, Çetinkaya-Rundel, und Grolemund (2023).\n\n\n\n\neine_liste &lt;- list(titel = \"Einführung\",\n                   woche = 1,\n                   datum = c(\"2022-03-14\", \"2202-03-21\"),\n                   lernziele = c(\"dies\", \"jenes\", \"und noch mehr\"),\n                   lehre = c(TRUE, TRUE, TRUE)\n                   )\nstr(eine_liste)\n## List of 5\n##  $ titel    : chr \"Einführung\"\n##  $ woche    : num 1\n##  $ datum    : chr [1:2] \"2022-03-14\" \"2202-03-21\"\n##  $ lernziele: chr [1:3] \"dies\" \"jenes\" \"und noch mehr\"\n##  $ lehre    : logi [1:3] TRUE TRUE TRUE\n\n\n\n\nFür tibble() brauchen wir tidyverse:\n\nlibrary(tidyverse)\n\n\n\nstudentis &lt;-\n  tibble(\n    name = c(\"Anna\", \"Berta\"),\n    motivation = c(10, 20),\n    noten = c(1.3, 1.7)\n  )\nstr(studentis)\n## tibble [2 × 3] (S3: tbl_df/tbl/data.frame)\n##  $ name      : chr [1:2] \"Anna\" \"Berta\"\n##  $ motivation: num [1:2] 10 20\n##  $ noten     : num [1:2] 1.3 1.7\n\n\n\n\n\nEinen Teil eines Objekts auszulesen, bezeichnen wir als Indizieren.\n\n\nZur Erinnerung:\n\nstr(ein_vektor)\n##  num [1:3] 1 2 3\n\n\nein_vektor[1]\n## [1] 1\nein_vektor[c(1,2)]\n## [1] 1 2\n\nAber nicht so:\n\nein_vektor[1,2]\n## Error in ein_vektor[1, 2]: falsche Anzahl von Dimensionen\n\nMan darf Vektoren auch wie Listen ansprechen, also eine doppelte Eckklammer zum Indizieren verwenden\n\nein_vektor[[2]]\n## [1] 2\n\nDer Grund ist, dass Listen auch Vektoren sind, nur eben ein besonderer Fall eines Vektors:\n\nis.vector(eine_liste)\n## [1] TRUE\n\nWas passiert, wenn man bei einem Vektor der Länge 3 das 4. Element indiziert?\n\nein_vektor[4]\n## [1] NA\n\nEin schnödes NA ist die Antwort. Das ist interessant: Wir bekommen keine Fehlermeldung, sondern den Hinweis, das angesprochene Element sei leer bzw. nicht verfügbar.\nIn Sauer (2019), Kap. 5.3.1 findet man weitere Indizierungsmöglichkeiten für reine Vektoren.\n\n\n\n\neine_liste %&gt;% str()\n## List of 5\n##  $ titel    : chr \"Einführung\"\n##  $ woche    : num 1\n##  $ datum    : chr [1:2] \"2022-03-14\" \"2202-03-21\"\n##  $ lernziele: chr [1:3] \"dies\" \"jenes\" \"und noch mehr\"\n##  $ lehre    : logi [1:3] TRUE TRUE TRUE\n\nListen können wie Vektoren, also mit [ ausgelesen werden. Dann wird eine Liste zurückgegeben.\n\neine_liste[1]\n## $titel\n## [1] \"Einführung\"\neine_liste[2]\n## $woche\n## [1] 1\n\nDas hat den technischen Hintergrund, dass Listen als eine bestimmte Art von Vektoren implementiert sind.\nMann kann auch die “doppelte Eckklammer”, [[ zum Auslesen verwenden; dann wird anstelle einer Liste die einfachere Struktur eines Vektors zurückgegeben:\n\neine_liste[[1]]\n## [1] \"Einführung\"\n\nMan könnte sagen, die “äußere Schicht” des Objekts, die Liste, wird abgeschält, und man bekommnt die “innere” Schicht, den Vektor.\nMann die Elemente der Liste entweder mit ihrer Positionsnummer (1, 2, …) oder, sofern vorhanden, ihren Namen ansprechen:\n\neine_liste[[\"titel\"]]\n## [1] \"Einführung\"\n\nDann gibt es noch den Dollar-Operator, mit dem Mann benannte Elemente von Listen ansprechen kann:\n\neine_liste$titel\n## [1] \"Einführung\"\n\nMan kann auch tiefer in eine Liste hinein indizieren. Sagen wir, uns interessiert das 4. Element der Liste eine_liste - und davon das erste Element.\nDas geht dann so:\n\neine_liste[[4]][[1]] \n## [1] \"dies\"\n\nEine einfachere Art des Indizierens von Listen bietet die Funktion pluck(), aus dem Paket purrr, das Hilfen für den Umgang mit Listen bietet.\n\npluck(eine_liste, 4)\n## [1] \"dies\"          \"jenes\"         \"und noch mehr\"\n\nUnd jetzt aus dem 4. Element das 1. Element:\n\npluck(eine_liste, 4, 1)\n## [1] \"dies\"\n\nProbieren Sie mal, aus einer Liste der Länge 5 das 6. Element auszulesen:\n\neine_liste %&gt;% length()\n## [1] 5\n\n\neine_liste[[6]]\n## Error in eine_liste[[6]]: Indizierung außerhalb der Grenzen\n\nUnser Versuch wird mit einer Fehlermeldung quittiert.\nSprechen wir die Liste wie einen (atomaren) Vektor an, bekommen wir hingegen ein NA bzw. ein NULL:\n\neine_liste[6]\n## $&lt;NA&gt;\n## NULL\n\n\n\n\nTibbles lassen sich sowohl wie ein Vektor als auch wie eine Liste indizieren.\n\nstudentis[1]\n## # A tibble: 2 × 1\n##   name \n##   &lt;chr&gt;\n## 1 Anna \n## 2 Berta\n\nDie Indizierung eines Tibbles mit der einfachen Eckklammer liefert einen Tibble zurück.\n\nstudentis[\"name\"]\n## # A tibble: 2 × 1\n##   name \n##   &lt;chr&gt;\n## 1 Anna \n## 2 Berta\n\nMit doppelter Eckklammer bekommt man, analog zur Liste, einen Vektor zurück:\n\nstudentis[[\"name\"]]\n## [1] \"Anna\"  \"Berta\"\n\nBeim Dollar-Operator kommt auch eine Liste zurück:\n\nstudentis$name\n## [1] \"Anna\"  \"Berta\"\n\n\n\n\n\n\nTutorial zum Themen Indizieren von Listen von Jenny BC.\n\n\n\n\nNatürlich kann man auch die Tidyverse-Verben zum Indizieren verwenden. Das bietet sich an, wenn zwei Bedingungen erfüllt sind:\n\nWenn man einen Tibble als Input und als Output hat\nWenn man nicht programmieren möchte\n\n\n\n\n\nErfahrungsgemäß gibt es bei einigen Lernenden Probleme mit dem Importieren von Daten. Genauer gesagt machen die Pfade Probleme.\n\n\n\n\n\n\nTipp\n\n\n\nMan arbeite in einem RStudio-Projekt. Dort lege man z.B. auch die Daten ab. Das macht das Arbeiten mit den Pfaden einfacher.\n\n\nZentral für das Arbeiten mit Pfaden ist der Unterschied von relativen zu absoluten Pfaden.\n\nÜbungsaufgabe 1 Lesen Sich sich zum Unterschied von relativen zu absoluten Pfaden ein. Hier oder hier finden Sie einen Ansatzpunkt.\n\n\nBeispiel 2  \n\n\"C:\\Users\\sebastian.sauer\\Documents\\Github\\hans-hackathon\\input\\mtcars.csv\" ist ein absoluter Pfad.\n\"input\\mtcars.csv\" ist ein relativer Pfad.\n\n\n\nÜbungsaufgabe 2 (Daten importieren mit relativem Pfad) Laden Sie den Datensatz mtcars herunter und kopieren Sie ihn in ein Unterverzeichnis Ihres Projektordners. Das Unterverzeichnis soll hießen data. Dann importieren Sie den Datensatz, wobei Sie den Unterordner als relativen Pfad angeben:\n\nmtcars &lt;- read.csv(\"input/mtcars.csv\")\n\n\n Download \n\nÜbungsaufgabe 3 (Daten importieren mit absolutem Pfad) Importieren Sie den Datensatz mtcars mit absolutem Pfad. Was sind die Vor- und die Nachteile dieses Vorgehens?\n\n\npath_abs &lt;- \"C:\\Users\\sebastian.sauer\\Documents\\Github\\hans-hackathon\\input\\mtcars.csv\" # Pfad auf MEINER Maschine\nmtcars &lt;- read.csv(path_abs)\n\nEin Nachteil von absoluten Pfaden ist, dass sie nicht portabel sind: Mein Pfad wird auf Ihrem Computer nicht funktionieren.\nEine Hilfe bietet da das Paket here, das das aktuelle RStudio-Arbeitsverzeichnis (working directory) zurückgibt:\n\nhere()\n## [1] \"C:/Users/sebastian.sauer/Documents/Github/hans-hackathon\"\n\nEntsprechend können wir uns damit portablere absolute Pfade basteln:\n\npath_abs_portable &lt;- paste0(here(),\"/\", \"input/mtcars.csv\")\npath_abs_portable\n## [1] \"C:/Users/sebastian.sauer/Documents/Github/hans-hackathon/input/mtcars.csv\"\n\nmtcars &lt;- read.csv(path_abs_portable)\n\n\n\n\n\n\n\nBackslashes haben eine besondere Bedeutung in R\n\n\n\nWenn Sie Windows nutzen, ersetzen Sie am besten die Backslashes durch normale (“Forward-”)Slashes, das können Sie mit Search-Replace in RStudio erledigen.\n\n\n\npath_abs &lt;- \"C:/Users/sebastian.sauer/Documents/Github/hans-hackathon/input/mtcars.csv\"\nmtcars &lt;- read.csv(path_abs)\n\n\n\n\nManchmal findet man Datensätze im sog. langen Format vor, manchmal im breiten.\nIn der Regel müssen die Daten “tidy” sein, was meist dem langen Format entspricht, vgl. Abbildung 4 aus Sauer (2019).\n\n\n\n\n\n\nAbbildung 4: Von lang nach breit und zurück\n\n\n\nIn einer neueren Version des Tidyverse werden diese beiden Befehle umbenannt bzw. erweitert, s. Abbildung 5.\n\ngather() -&gt; pivot_longer()\nspread() -&gt; pivot_wider()\n\n\n\n\n\n\n\nAbbildung 5: Von “weit” zu “breit” und zurück, eine Animation\n\n\n\nWeitere Informationen findet sich in Wickham, Çetinkaya-Rundel, und Grolemund (2023), in diesem Abschnitt, 12.3.\n\n\n\nEine Funktion kann man sich als analog zu einer Variable vorstellen. Es ist ein Objekt, das nicht Daten, sondern Syntax beinhaltet, vgl. Abbildung 6 aus Sauer (2019).\n\n\n\n\n\n\nAbbildung 6: Sinnbild einer Funktion\n\n\n\n\nmittelwert &lt;- function(x){\n  \n  summe &lt;- sum(x, na.rm = TRUE)\n  mw &lt;- summe/length(x)\n  return(mw)\n  \n}\n\n\nmittelwert(c(1, 2, 3))\n## [1] 2\n\nEs gibt viele Bücher und Webseiten, was eine Funktion (in R) ist, wozu sie gut ist und wie man sie schreibt und nutzt. Weitere Informationen finden sich in Kapitel 19 in Wickham, Çetinkaya-Rundel, und Grolemund (2023). Alternativ findet sich ein Abschnitt dazu (28.1) in Sauer (2019).\n\nÜbungsaufgabe 4 (Schreiben Sie eine einfache Funktion) Schreiben Sie eine einfache R-Funktion und erklären Sie sie.\n\n\n\n\n\nStellen Sie sich vor, Sie haben eine Menge Emails (ein paar Zehntausend), in denen Telefonnummern mit Durchwahlen zur Firma, in der Sie arbeiten vorkommen. Sie möchten alle Emails herausfischen, die eine solche Telefonnummer beinhaltet. Da es viele Emails sind, möchten Sie die Mails nicht einzeln anpacken. Sie bräuchten einen kleinen Roboter, dem Sie sinngemäß sagen könnten:\n\n🧑‍🎓 Hey, ich hätte gerne alle Mails mit den Telefonnummern in unseren Betrieb. Aber keine andere Mail bitte sehr.\n\n\n🤖 Jippiejeh, endlich geht’s wieder los!\n\n\nTextvariablen erkennt man daran, dass ihr Inhalt mit doppelten oder einfachen Anführungszeichen ausgezeichnet ist:\n\neine_antwort &lt;- \"Die Antwort lautet 42\"\nandere_antwort &lt;- \"Die Antwort lautet 73\"\n\nWickham bieten eine gute Einführung in die Analyse von Textvariablen bzw. Textdaten.\n\n\n\nHäufig möchte man eine Operation mehrfach ausführen. Ein Beispiel wäre die Anzahl der fehlenden Werte pro Spalte auslesen. Natürlich kann man die Abfrage einfach häufig tippen, nervt aber irgendwann. Daher braucht’s Strukturen, die Wiederholungen beschreiben.\nDafür gibt es verschiedene Ansätze.\n\n\nHandelt es sich um Spalten von Tibbles, dann bietet sich die Funktion across(.col, .fns) an. across wendet eine oder mehrere Funktionen (mit .fns bezeichnet) auf die Spalten .col an.\nDas erklärt sich am besten mit einem Beispiel:\nNatürlich hätte man in diesem Fall auch anders vorgehen können:\n\nmtcars %&gt;% \n  summarise(across(.cols = everything(),\n                   .fns = mean))\n##   model      mpg    cyl     disp       hp     drat      wt     qsec     vs\n## 1    NA 20.09062 6.1875 230.7219 146.6875 3.596563 3.21725 17.84875 0.4375\n##        am   gear   carb\n## 1 0.40625 3.6875 2.8125\n\nMöchte man der Funktion .fns Parameter übergeben, so nutzt man diese Syntax (“Purrr-Lambda”):\n\nmtcars %&gt;% \n  summarise(across(.cols = everything(),\n                   .fns = ~ mean(., na.rm = TRUE)))\n##   model      mpg    cyl     disp       hp     drat      wt     qsec     vs\n## 1    NA 20.09062 6.1875 230.7219 146.6875 3.596563 3.21725 17.84875 0.4375\n##        am   gear   carb\n## 1 0.40625 3.6875 2.8125\n\nHier findet sich ein guter Überblick zu across().\n\n\n\nmap() ist eine Funktion aus dem R-Paket purrr und Teil des Tidyverse.\nmap(x, f) wenden die Funktion f auf jedes Element von x an. Ist x ein Tibble, so wird f demnach auf jede Spalte von x angewendet (“zugeordnet”, daher map), vgl. Abbildung 7 aus Sauer (2019).\n\n\n\n\n\n\nAbbildung 7: Sinnbild für map aus purrr\n\n\n\nHier ein Beispiel-Code:\n\ndata(mtcars)\n\nmtcars &lt;- mtcars %&gt;% select(1:3)  # nur die ersten 3 Spalten\n\nmap(mtcars, mean)\n## $mpg\n## [1] 20.09062\n## \n## $cyl\n## [1] 6.1875\n## \n## $disp\n## [1] 230.7219\n\nMöchte man der gemappten Funktion Parameter übergeben, nutzt man wieder die “Kringel-Schreibweise”:\n\nmap(mtcars, ~ mean(., na.rm = TRUE))\n## $mpg\n## [1] 20.09062\n## \n## $cyl\n## [1] 6.1875\n## \n## $disp\n## [1] 230.7219\n\n\n\n\nWeiteres zu map() findet sich z.B. in Wickham, Çetinkaya-Rundel, und Grolemund (2023), Kapitel 21.5 oder in Sauer (2019), Kap. 28.2.\nHier ist ein Tutorial zu map() von Jenny BC.\n\n\n\n\nManche behaupten, R sei ein Inferno.\nZum Glück gibt es auch aufmunternde Stimmen:\n\npraise::praise()\n## [1] \"You are stunning!\"\n\nHat jemand einen guten Rat für uns? Vielleicht ist der häufigste Rat, dass man die Dokumentation lesen solle.\n\n\n\nHier finden Sie einige Fallstudien, die Ihnen die Inhalte dieses Kapitels näher bringen.\n\nFallstudie Flugverspätungen\nFallstudie Getreideernte",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#lernsteuerung",
    "href": "einstieg.html#lernsteuerung",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Sie können Funktionen, in R schreiben.\nSie können Datensätze vom Lang- und Breit-Format wechseln.\nSie können Wiederholungsstrukturen wie Mapping-Funktionen anwenden.\nSie können eine dplyr-Funktion auf mehrere Spalten gleichzeitig anwenden.\nSie können Textdaten analysieren.\nSie können mit Pfaden (relativ und absolut) umgehen.\n\n\n\n\nMachen Sie sich mit den Grundlagen von R vertraut. Die Grundlagen von R können z.B. im Online-Buch ‘Statistik1’, Kapitel ‘Daten einlesen’ wiederholt werden.",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#objekttypen-in-r",
    "href": "einstieg.html#objekttypen-in-r",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Näheres zu Objekttypen findet sich in Sauer (2019), Kap. 5.2.\n\n\nIn R ist praktisch alles ein Objekt.\n\nDefinition 1 (Objekt (Informatik)) Ein Objekt meint ein im Computerspeicher repräsentiertes Ding, etwa eine Tabelle.\\(\\square\\)\n\n\nBeispiel 1 (Beispiele für Objekte) Vektoren und Dataframes (Tibbles) sind die vielleicht gängigsten Objektarten in R (vgl. Abbildung 1), aus Sauer (2019)).\\(\\square\\)\n\n\n\n\n\n\n\nAbbildung 1: Zentrale Objektarten in R\n\n\n\nEs gibt in R keine (Objekte für) Skalare (einzelne Zahlen). Stattdessen nutzt R Vektoren der Länge 1.\nEin nützliches Schema stammt aus Wickham, Çetinkaya-Rundel, und Grolemund (2023), s. Abbildung 2).\n\n\n\n\n\n\nAbbildung 2: Objektarten hierarchisch gegliedert\n\n\n\n\n\n\nUnter homogenen Objektiven verstehen wir Datenstrukturen, die nur eine Art von Daten (wie Text oder Ganze Zahlen) fassen. Sonstige Objekte nennen wir heterogen.\n\nHomogene Objekte\n\nVektoren\nMatrizen\n\nHeterogen\n\nListe\nDataframes (Tibbles)\n\n\n\n\nVektoren sind insofern zentral in R, als dass die übrigen Datenstrukturen auf ihnen aufbauen, vgl. Abbildung 3 aus Sauer (2019).\nReine (atomare) Vektoren in R sind eine geordnete Liste von Daten eines Typs.\n\n\n\n\n\n\nAbbildung 3: Vektoren stehen im Zentrum der Datenstrukturen in R\n\n\n\n\nein_vektor &lt;- c(1, 2, 3)\nnoch_ein_vektor &lt;- c(\"A\", \"B\", \"C\")\nlogischer_vektor &lt;- c(TRUE, FALSE, TRUE)\n\nMit str() kann man sich die Struktur eines Objektsausgeben lassen:\n\nstr(ein_vektor)\n##  num [1:3] 1 2 3\nstr(noch_ein_vektor)\n##  chr [1:3] \"A\" \"B\" \"C\"\nstr(logischer_vektor)\n##  logi [1:3] TRUE FALSE TRUE\n\nVektoren können von folgenden Typen sein:\n\nKommazahlen ( double) genannt\nGanzzahlig (integer, auch mit L für Long abgekürzt)\nText (´character`, String)\nlogische Ausdrücke (logical oder lgl) mit TRUE oder FALSE\n\nKommazahlen und Ganze Zahlen zusammen bilden den Typ numeric (numerisch) in R.\nDen Typ eines Vektors kann man mit typeof() ausgeben lassen:\n\ntypeof(ein_vektor)\n## [1] \"double\"\n\n\n\n\n\nsex &lt;- factor(c(\"Mann\", \"Frau\", \"Frau\"))\n\nInteressant:\n\nstr(sex)\n##  Factor w/ 2 levels \"Frau\",\"Mann\": 2 1 1\n\nVertiefende Informationen findet sich in Wickham, Çetinkaya-Rundel, und Grolemund (2023).\n\n\n\n\neine_liste &lt;- list(titel = \"Einführung\",\n                   woche = 1,\n                   datum = c(\"2022-03-14\", \"2202-03-21\"),\n                   lernziele = c(\"dies\", \"jenes\", \"und noch mehr\"),\n                   lehre = c(TRUE, TRUE, TRUE)\n                   )\nstr(eine_liste)\n## List of 5\n##  $ titel    : chr \"Einführung\"\n##  $ woche    : num 1\n##  $ datum    : chr [1:2] \"2022-03-14\" \"2202-03-21\"\n##  $ lernziele: chr [1:3] \"dies\" \"jenes\" \"und noch mehr\"\n##  $ lehre    : logi [1:3] TRUE TRUE TRUE\n\n\n\n\nFür tibble() brauchen wir tidyverse:\n\nlibrary(tidyverse)\n\n\n\nstudentis &lt;-\n  tibble(\n    name = c(\"Anna\", \"Berta\"),\n    motivation = c(10, 20),\n    noten = c(1.3, 1.7)\n  )\nstr(studentis)\n## tibble [2 × 3] (S3: tbl_df/tbl/data.frame)\n##  $ name      : chr [1:2] \"Anna\" \"Berta\"\n##  $ motivation: num [1:2] 10 20\n##  $ noten     : num [1:2] 1.3 1.7\n\n\n\n\n\nEinen Teil eines Objekts auszulesen, bezeichnen wir als Indizieren.\n\n\nZur Erinnerung:\n\nstr(ein_vektor)\n##  num [1:3] 1 2 3\n\n\nein_vektor[1]\n## [1] 1\nein_vektor[c(1,2)]\n## [1] 1 2\n\nAber nicht so:\n\nein_vektor[1,2]\n## Error in ein_vektor[1, 2]: falsche Anzahl von Dimensionen\n\nMan darf Vektoren auch wie Listen ansprechen, also eine doppelte Eckklammer zum Indizieren verwenden\n\nein_vektor[[2]]\n## [1] 2\n\nDer Grund ist, dass Listen auch Vektoren sind, nur eben ein besonderer Fall eines Vektors:\n\nis.vector(eine_liste)\n## [1] TRUE\n\nWas passiert, wenn man bei einem Vektor der Länge 3 das 4. Element indiziert?\n\nein_vektor[4]\n## [1] NA\n\nEin schnödes NA ist die Antwort. Das ist interessant: Wir bekommen keine Fehlermeldung, sondern den Hinweis, das angesprochene Element sei leer bzw. nicht verfügbar.\nIn Sauer (2019), Kap. 5.3.1 findet man weitere Indizierungsmöglichkeiten für reine Vektoren.\n\n\n\n\neine_liste %&gt;% str()\n## List of 5\n##  $ titel    : chr \"Einführung\"\n##  $ woche    : num 1\n##  $ datum    : chr [1:2] \"2022-03-14\" \"2202-03-21\"\n##  $ lernziele: chr [1:3] \"dies\" \"jenes\" \"und noch mehr\"\n##  $ lehre    : logi [1:3] TRUE TRUE TRUE\n\nListen können wie Vektoren, also mit [ ausgelesen werden. Dann wird eine Liste zurückgegeben.\n\neine_liste[1]\n## $titel\n## [1] \"Einführung\"\neine_liste[2]\n## $woche\n## [1] 1\n\nDas hat den technischen Hintergrund, dass Listen als eine bestimmte Art von Vektoren implementiert sind.\nMann kann auch die “doppelte Eckklammer”, [[ zum Auslesen verwenden; dann wird anstelle einer Liste die einfachere Struktur eines Vektors zurückgegeben:\n\neine_liste[[1]]\n## [1] \"Einführung\"\n\nMan könnte sagen, die “äußere Schicht” des Objekts, die Liste, wird abgeschält, und man bekommnt die “innere” Schicht, den Vektor.\nMann die Elemente der Liste entweder mit ihrer Positionsnummer (1, 2, …) oder, sofern vorhanden, ihren Namen ansprechen:\n\neine_liste[[\"titel\"]]\n## [1] \"Einführung\"\n\nDann gibt es noch den Dollar-Operator, mit dem Mann benannte Elemente von Listen ansprechen kann:\n\neine_liste$titel\n## [1] \"Einführung\"\n\nMan kann auch tiefer in eine Liste hinein indizieren. Sagen wir, uns interessiert das 4. Element der Liste eine_liste - und davon das erste Element.\nDas geht dann so:\n\neine_liste[[4]][[1]] \n## [1] \"dies\"\n\nEine einfachere Art des Indizierens von Listen bietet die Funktion pluck(), aus dem Paket purrr, das Hilfen für den Umgang mit Listen bietet.\n\npluck(eine_liste, 4)\n## [1] \"dies\"          \"jenes\"         \"und noch mehr\"\n\nUnd jetzt aus dem 4. Element das 1. Element:\n\npluck(eine_liste, 4, 1)\n## [1] \"dies\"\n\nProbieren Sie mal, aus einer Liste der Länge 5 das 6. Element auszulesen:\n\neine_liste %&gt;% length()\n## [1] 5\n\n\neine_liste[[6]]\n## Error in eine_liste[[6]]: Indizierung außerhalb der Grenzen\n\nUnser Versuch wird mit einer Fehlermeldung quittiert.\nSprechen wir die Liste wie einen (atomaren) Vektor an, bekommen wir hingegen ein NA bzw. ein NULL:\n\neine_liste[6]\n## $&lt;NA&gt;\n## NULL\n\n\n\n\nTibbles lassen sich sowohl wie ein Vektor als auch wie eine Liste indizieren.\n\nstudentis[1]\n## # A tibble: 2 × 1\n##   name \n##   &lt;chr&gt;\n## 1 Anna \n## 2 Berta\n\nDie Indizierung eines Tibbles mit der einfachen Eckklammer liefert einen Tibble zurück.\n\nstudentis[\"name\"]\n## # A tibble: 2 × 1\n##   name \n##   &lt;chr&gt;\n## 1 Anna \n## 2 Berta\n\nMit doppelter Eckklammer bekommt man, analog zur Liste, einen Vektor zurück:\n\nstudentis[[\"name\"]]\n## [1] \"Anna\"  \"Berta\"\n\nBeim Dollar-Operator kommt auch eine Liste zurück:\n\nstudentis$name\n## [1] \"Anna\"  \"Berta\"\n\n\n\n\n\n\nTutorial zum Themen Indizieren von Listen von Jenny BC.\n\n\n\n\nNatürlich kann man auch die Tidyverse-Verben zum Indizieren verwenden. Das bietet sich an, wenn zwei Bedingungen erfüllt sind:\n\nWenn man einen Tibble als Input und als Output hat\nWenn man nicht programmieren möchte",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#pfade",
    "href": "einstieg.html#pfade",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Erfahrungsgemäß gibt es bei einigen Lernenden Probleme mit dem Importieren von Daten. Genauer gesagt machen die Pfade Probleme.\n\n\n\n\n\n\nTipp\n\n\n\nMan arbeite in einem RStudio-Projekt. Dort lege man z.B. auch die Daten ab. Das macht das Arbeiten mit den Pfaden einfacher.\n\n\nZentral für das Arbeiten mit Pfaden ist der Unterschied von relativen zu absoluten Pfaden.\n\nÜbungsaufgabe 1 Lesen Sich sich zum Unterschied von relativen zu absoluten Pfaden ein. Hier oder hier finden Sie einen Ansatzpunkt.\n\n\nBeispiel 2  \n\n\"C:\\Users\\sebastian.sauer\\Documents\\Github\\hans-hackathon\\input\\mtcars.csv\" ist ein absoluter Pfad.\n\"input\\mtcars.csv\" ist ein relativer Pfad.\n\n\n\nÜbungsaufgabe 2 (Daten importieren mit relativem Pfad) Laden Sie den Datensatz mtcars herunter und kopieren Sie ihn in ein Unterverzeichnis Ihres Projektordners. Das Unterverzeichnis soll hießen data. Dann importieren Sie den Datensatz, wobei Sie den Unterordner als relativen Pfad angeben:\n\nmtcars &lt;- read.csv(\"input/mtcars.csv\")\n\n\n Download \n\nÜbungsaufgabe 3 (Daten importieren mit absolutem Pfad) Importieren Sie den Datensatz mtcars mit absolutem Pfad. Was sind die Vor- und die Nachteile dieses Vorgehens?\n\n\npath_abs &lt;- \"C:\\Users\\sebastian.sauer\\Documents\\Github\\hans-hackathon\\input\\mtcars.csv\" # Pfad auf MEINER Maschine\nmtcars &lt;- read.csv(path_abs)\n\nEin Nachteil von absoluten Pfaden ist, dass sie nicht portabel sind: Mein Pfad wird auf Ihrem Computer nicht funktionieren.\nEine Hilfe bietet da das Paket here, das das aktuelle RStudio-Arbeitsverzeichnis (working directory) zurückgibt:\n\nhere()\n## [1] \"C:/Users/sebastian.sauer/Documents/Github/hans-hackathon\"\n\nEntsprechend können wir uns damit portablere absolute Pfade basteln:\n\npath_abs_portable &lt;- paste0(here(),\"/\", \"input/mtcars.csv\")\npath_abs_portable\n## [1] \"C:/Users/sebastian.sauer/Documents/Github/hans-hackathon/input/mtcars.csv\"\n\nmtcars &lt;- read.csv(path_abs_portable)\n\n\n\n\n\n\n\nBackslashes haben eine besondere Bedeutung in R\n\n\n\nWenn Sie Windows nutzen, ersetzen Sie am besten die Backslashes durch normale (“Forward-”)Slashes, das können Sie mit Search-Replace in RStudio erledigen.\n\n\n\npath_abs &lt;- \"C:/Users/sebastian.sauer/Documents/Github/hans-hackathon/input/mtcars.csv\"\nmtcars &lt;- read.csv(path_abs)",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#datensätze-von-lang-nach-breit-umformatieren",
    "href": "einstieg.html#datensätze-von-lang-nach-breit-umformatieren",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Manchmal findet man Datensätze im sog. langen Format vor, manchmal im breiten.\nIn der Regel müssen die Daten “tidy” sein, was meist dem langen Format entspricht, vgl. Abbildung 4 aus Sauer (2019).\n\n\n\n\n\n\nAbbildung 4: Von lang nach breit und zurück\n\n\n\nIn einer neueren Version des Tidyverse werden diese beiden Befehle umbenannt bzw. erweitert, s. Abbildung 5.\n\ngather() -&gt; pivot_longer()\nspread() -&gt; pivot_wider()\n\n\n\n\n\n\n\nAbbildung 5: Von “weit” zu “breit” und zurück, eine Animation\n\n\n\nWeitere Informationen findet sich in Wickham, Çetinkaya-Rundel, und Grolemund (2023), in diesem Abschnitt, 12.3.",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#funktionen",
    "href": "einstieg.html#funktionen",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Eine Funktion kann man sich als analog zu einer Variable vorstellen. Es ist ein Objekt, das nicht Daten, sondern Syntax beinhaltet, vgl. Abbildung 6 aus Sauer (2019).\n\n\n\n\n\n\nAbbildung 6: Sinnbild einer Funktion\n\n\n\n\nmittelwert &lt;- function(x){\n  \n  summe &lt;- sum(x, na.rm = TRUE)\n  mw &lt;- summe/length(x)\n  return(mw)\n  \n}\n\n\nmittelwert(c(1, 2, 3))\n## [1] 2\n\nEs gibt viele Bücher und Webseiten, was eine Funktion (in R) ist, wozu sie gut ist und wie man sie schreibt und nutzt. Weitere Informationen finden sich in Kapitel 19 in Wickham, Çetinkaya-Rundel, und Grolemund (2023). Alternativ findet sich ein Abschnitt dazu (28.1) in Sauer (2019).\n\nÜbungsaufgabe 4 (Schreiben Sie eine einfache Funktion) Schreiben Sie eine einfache R-Funktion und erklären Sie sie.",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#textverarbeitung",
    "href": "einstieg.html#textverarbeitung",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Stellen Sie sich vor, Sie haben eine Menge Emails (ein paar Zehntausend), in denen Telefonnummern mit Durchwahlen zur Firma, in der Sie arbeiten vorkommen. Sie möchten alle Emails herausfischen, die eine solche Telefonnummer beinhaltet. Da es viele Emails sind, möchten Sie die Mails nicht einzeln anpacken. Sie bräuchten einen kleinen Roboter, dem Sie sinngemäß sagen könnten:\n\n🧑‍🎓 Hey, ich hätte gerne alle Mails mit den Telefonnummern in unseren Betrieb. Aber keine andere Mail bitte sehr.\n\n\n🤖 Jippiejeh, endlich geht’s wieder los!\n\n\nTextvariablen erkennt man daran, dass ihr Inhalt mit doppelten oder einfachen Anführungszeichen ausgezeichnet ist:\n\neine_antwort &lt;- \"Die Antwort lautet 42\"\nandere_antwort &lt;- \"Die Antwort lautet 73\"\n\nWickham bieten eine gute Einführung in die Analyse von Textvariablen bzw. Textdaten.",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#wiederholungen-programmieren",
    "href": "einstieg.html#wiederholungen-programmieren",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Häufig möchte man eine Operation mehrfach ausführen. Ein Beispiel wäre die Anzahl der fehlenden Werte pro Spalte auslesen. Natürlich kann man die Abfrage einfach häufig tippen, nervt aber irgendwann. Daher braucht’s Strukturen, die Wiederholungen beschreiben.\nDafür gibt es verschiedene Ansätze.\n\n\nHandelt es sich um Spalten von Tibbles, dann bietet sich die Funktion across(.col, .fns) an. across wendet eine oder mehrere Funktionen (mit .fns bezeichnet) auf die Spalten .col an.\nDas erklärt sich am besten mit einem Beispiel:\nNatürlich hätte man in diesem Fall auch anders vorgehen können:\n\nmtcars %&gt;% \n  summarise(across(.cols = everything(),\n                   .fns = mean))\n##   model      mpg    cyl     disp       hp     drat      wt     qsec     vs\n## 1    NA 20.09062 6.1875 230.7219 146.6875 3.596563 3.21725 17.84875 0.4375\n##        am   gear   carb\n## 1 0.40625 3.6875 2.8125\n\nMöchte man der Funktion .fns Parameter übergeben, so nutzt man diese Syntax (“Purrr-Lambda”):\n\nmtcars %&gt;% \n  summarise(across(.cols = everything(),\n                   .fns = ~ mean(., na.rm = TRUE)))\n##   model      mpg    cyl     disp       hp     drat      wt     qsec     vs\n## 1    NA 20.09062 6.1875 230.7219 146.6875 3.596563 3.21725 17.84875 0.4375\n##        am   gear   carb\n## 1 0.40625 3.6875 2.8125\n\nHier findet sich ein guter Überblick zu across().\n\n\n\nmap() ist eine Funktion aus dem R-Paket purrr und Teil des Tidyverse.\nmap(x, f) wenden die Funktion f auf jedes Element von x an. Ist x ein Tibble, so wird f demnach auf jede Spalte von x angewendet (“zugeordnet”, daher map), vgl. Abbildung 7 aus Sauer (2019).\n\n\n\n\n\n\nAbbildung 7: Sinnbild für map aus purrr\n\n\n\nHier ein Beispiel-Code:\n\ndata(mtcars)\n\nmtcars &lt;- mtcars %&gt;% select(1:3)  # nur die ersten 3 Spalten\n\nmap(mtcars, mean)\n## $mpg\n## [1] 20.09062\n## \n## $cyl\n## [1] 6.1875\n## \n## $disp\n## [1] 230.7219\n\nMöchte man der gemappten Funktion Parameter übergeben, nutzt man wieder die “Kringel-Schreibweise”:\n\nmap(mtcars, ~ mean(., na.rm = TRUE))\n## $mpg\n## [1] 20.09062\n## \n## $cyl\n## [1] 6.1875\n## \n## $disp\n## [1] 230.7219\n\n\n\n\nWeiteres zu map() findet sich z.B. in Wickham, Çetinkaya-Rundel, und Grolemund (2023), Kapitel 21.5 oder in Sauer (2019), Kap. 28.2.\nHier ist ein Tutorial zu map() von Jenny BC.",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#r-ist-schwierig",
    "href": "einstieg.html#r-ist-schwierig",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Manche behaupten, R sei ein Inferno.\nZum Glück gibt es auch aufmunternde Stimmen:\n\npraise::praise()\n## [1] \"You are stunning!\"\n\nHat jemand einen guten Rat für uns? Vielleicht ist der häufigste Rat, dass man die Dokumentation lesen solle.",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "einstieg.html#fallstudien",
    "href": "einstieg.html#fallstudien",
    "title": "1 R, zweiter Blick",
    "section": "",
    "text": "Hier finden Sie einige Fallstudien, die Ihnen die Inhalte dieses Kapitels näher bringen.\n\nFallstudie Flugverspätungen\nFallstudie Getreideernte",
    "crumbs": [
      "R, zweiter Blick"
    ]
  },
  {
    "objectID": "challenge02-solution.html",
    "href": "challenge02-solution.html",
    "title": "1 Lösung 02: Daten einlesen",
    "section": "",
    "text": "Daten einlesen\n\nImportieren Sie alle CSV-Dateien in R als Data Frames und binden Sie (zeilenweise) sie zu einem “langen” Data Frame.\nWandeln Sie leere Strings in NAs um (für alle Spalten).\nEntfernen Sie alle leeren Zeilen und Spalten.\nEntfernen Sie alle konstanten Zeilen und Spalten.\nEntfernen Sie alle redundanten Zeilen und Spalten, d.h. Duplikate, also sich wiederholende Zeilen und Spalten.\nÜberlegen Sie die Vor- und Nachteile, wenn Sie diese Aufgaben mit Excel lösen würden.\nExportieren Sie die Datentabelle als Excel-Datei. Prüfen Sie dann die Excel-Datei; fällt Ihnen etwas Besonderes auf?\n\nAusgabeformat: Quarto (Bericht)\n\n\n\n\n\n\nlibrary(tidyverse)\n#library(stringr)  # Strings verarbeiten\nlibrary(here)  # liest aktuelles Verzeichnis aus\nlibrary(visdat)\nlibrary(janitor)\nlibrary(writexl)\nlibrary(tictoc)  # Zeitmessung\nlibrary(polars)\nlibrary(tidypolars)\n\n\n\n\nWir definieren die Liste der zu importierenden CSV-Dateien:\n\ndata_folder &lt;- \"data-processed/data-raw-no-sensitive\"\n\ndatafiles_list &lt;- \n  list.files(path = paste0(here(), \"/\", data_folder),\n             pattern = \"csv$\",\n             full.names = TRUE)\n\nUnd dann importieren wir die CSV-Dateien und “binden” sie “zeilenweise” in einen großen, Gesamt-Data-Frame:\n\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(read.csv)  # dauert etwas...\ntoc()\n## 51.41 sec elapsed\n\n“Funktionales Programmieren” ist ein Paradigma, das in R gut umsetzbar ist.\nEin “klassischer” Ansatz wäre eine For-Schleife, ungefähr so:\n\nout &lt;- list()\nfor (i in 1:length(datafiles_list)) {\n out[[i]] &lt;- read.csv(datafiles_list[i]) \n}\n\nMit .id bekommt man eine laufende Nummer für jede eingehende CSV-Datei.\nPuh! Wenn man jetzt nicht 5 Tage, sondern 100 oder 1000 oder 10000 Tage importieren müsste, hätte man ein echtes Perofrmanzproblem. Könnte man die Dteien nicht schneller einlesen?\nmap_XXX(list, fun) wendet die Funktion fun auf jedes Element von list an. map_dfr ist eine spezielle Variante, die die Ergebnisse in einem Data-Frame zusammenführt und zwar zeilenweise (row), daher _dfr.\nCheck:\n\nd_small &lt;-\n  d |&gt; \n  select(1:50)\n\nd_small |&gt; glimpse()\n## Rows: 177\n## Columns: 50\n## $ X                                &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12…\n## $ idSite                           &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n## $ idVisit                          &lt;int&gt; 2352, 2351, 2350, 2348, 2349, 2347, 2…\n## $ actionDetails_0_type             &lt;chr&gt; \"action\", \"action\", \"action\", \"action…\n## $ actionDetails_0_url              &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_pageTitle        &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_pageIdAction     &lt;int&gt; 1205, 1205, 6641, 5206, 933, 6719, 12…\n## $ actionDetails_0_idpageview       &lt;chr&gt; \"7LcRJ3\", \"fOJq2y\", \"9T74s8\", \"RJKfLz…\n## $ actionDetails_0_serverTimePretty &lt;chr&gt; \"May 27, 2024 22:34:09\", \"May 27, 202…\n## $ actionDetails_0_pageId           &lt;int&gt; 1528485, 1528484, 1528483, 1528362, 1…\n## $ actionDetails_0_timeSpent        &lt;int&gt; 0, 0, 0, 3547, 29, 0, NA, 0, NA, 3, N…\n## $ actionDetails_0_timeSpentPretty  &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"29s\",…\n## $ actionDetails_0_pageviewPosition &lt;int&gt; 1, 1, 1, 1, 1, 1, NA, 1, NA, 1, NA, N…\n## $ actionDetails_0_title            &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_subtitle         &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_icon             &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"plugins/Morp…\n## $ actionDetails_0_iconSVG          &lt;chr&gt; \"plugins/Morpheus/images/action.svg\",…\n## $ actionDetails_0_timestamp        &lt;int&gt; 1716849249, 1716849233, 1716836633, 1…\n## $ goalConversions                  &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ siteCurrency                     &lt;chr&gt; \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"E…\n## $ siteCurrencySymbol               &lt;chr&gt; \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€…\n## $ serverDate                       &lt;chr&gt; \"2024-05-27\", \"2024-05-27\", \"2024-05-…\n## $ visitServerHour                  &lt;int&gt; 20, 20, 17, 17, 16, 15, 15, 14, 14, 1…\n## $ lastActionTimestamp              &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ lastActionDateTime               &lt;chr&gt; \"2024-05-27 20:34:09\", \"2024-05-27 20…\n## $ siteName                         &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ serverTimestamp                  &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ firstActionTimestamp             &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ serverTimePretty                 &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ serverDatePretty                 &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverDatePrettyFirstAction      &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverTimePrettyFirstAction      &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ userId                           &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitorType                      &lt;chr&gt; \"new\", \"new\", \"returning\", \"returning…\n## $ visitorTypeIcon                  &lt;chr&gt; \"\", \"\", \"plugins/Live/images/returnin…\n## $ visitConverted                   &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ visitConvertedIcon               &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitCount                       &lt;int&gt; 1, 1, 7, 22, 1, 1, 140, 1, 139, 138, …\n## $ visitEcommerceStatus             &lt;chr&gt; \"none\", \"none\", \"none\", \"none\", \"none…\n## $ visitEcommerceStatusIcon         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ daysSinceFirstVisit              &lt;int&gt; 0, 0, 10, 46, 0, 0, 84, 0, 84, 84, 48…\n## $ secondsSinceFirstVisit           &lt;int&gt; 0, 0, 882898, 3980095, 0, 0, 7327338,…\n## $ daysSinceLastEcommerceOrder      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ secondsSinceLastEcommerceOrder   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitDuration                    &lt;int&gt; 0, 0, 0, 3547, 31, 0, 1827, 0, 0, 16,…\n## $ visitDurationPretty              &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"31s\",…\n## $ searches                         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0…\n## $ actions                          &lt;int&gt; 1, 1, 1, 118, 3, 1, 16, 1, 1, 7, 139,…\n## $ interactions                     &lt;int&gt; 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 5, 1, 1…\n## $ referrerType                     &lt;chr&gt; \"direct\", \"direct\", \"direct\", \"websit…\n\nScheint zu passen.\nAlternativ kann man den Namen der Datei hinzufügen:\n\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(~ read.csv(.x) |&gt; \n            mutate(filename = basename(.x)))  # dauert etwas ...\n\nDie Tilde-Notation ~ ist eine Kurzschreibweise für eine Funktion. Man könnte also auch schreiben:\n\nmeine_funktion &lt;- function(x) {\n  read.csv(x) |&gt; \n    mutate(filename = basename(x))\n}\n\n\ndatafiles_list |&gt; \n  map_dfr(meine_funktion)\n\nExkurs: Noch etwas Erklärung zu map. map ist eine Art von “Schleife”: Die darauf bezogene Funktion wird für jedes Element der Liste ausgeführt. Im folgenden Beispiel wird die Funktion basename auf jedes Element der Liste datafiles_list angewendet, also der Dateiname ohne Pfad zurückgegeben.\n\ndatafiles_list |&gt; \n  map(basename)\n## [[1]]\n## [1] \"matomo_export_2024-05-27.csv\"\n## \n## [[2]]\n## [1] \"matomo_export_2024-05-28.csv\"\n## \n## [[3]]\n## [1] \"matomo_export_2024-05-29.csv\"\n## \n## [[4]]\n## [1] \"matomo_export_2024-05-30.csv\"\n## \n## [[5]]\n## [1] \"matomo_export_2024-05-31.csv\"\n## \n## [[6]]\n## [1] \"matomo_export_2024-06-01.csv\"\n## \n## [[7]]\n## [1] \"matomo_export_2024-06-02.csv\"\n## \n## [[8]]\n## [1] \"matomo_export_2024-06-03.csv\"\n\nCheck:\n\nd_small &lt;-\n  d |&gt; \n  select(filename, everything()) |&gt;  # `filename` nach vorne ziehen\n  select(1:50)\n\nd_small |&gt; glimpse()  # Blick reinwerfen\n## Rows: 177\n## Columns: 50\n## $ filename                         &lt;chr&gt; \"matomo_export_2024-05-27.csv\", \"mato…\n## $ X                                &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12…\n## $ idSite                           &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n## $ idVisit                          &lt;int&gt; 2352, 2351, 2350, 2348, 2349, 2347, 2…\n## $ actionDetails_0_type             &lt;chr&gt; \"action\", \"action\", \"action\", \"action…\n## $ actionDetails_0_url              &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_pageTitle        &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_pageIdAction     &lt;int&gt; 1205, 1205, 6641, 5206, 933, 6719, 12…\n## $ actionDetails_0_idpageview       &lt;chr&gt; \"7LcRJ3\", \"fOJq2y\", \"9T74s8\", \"RJKfLz…\n## $ actionDetails_0_serverTimePretty &lt;chr&gt; \"May 27, 2024 22:34:09\", \"May 27, 202…\n## $ actionDetails_0_pageId           &lt;int&gt; 1528485, 1528484, 1528483, 1528362, 1…\n## $ actionDetails_0_timeSpent        &lt;int&gt; 0, 0, 0, 3547, 29, 0, NA, 0, NA, 3, N…\n## $ actionDetails_0_timeSpentPretty  &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"29s\",…\n## $ actionDetails_0_pageviewPosition &lt;int&gt; 1, 1, 1, 1, 1, 1, NA, 1, NA, 1, NA, N…\n## $ actionDetails_0_title            &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_subtitle         &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_icon             &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"plugins/Morp…\n## $ actionDetails_0_iconSVG          &lt;chr&gt; \"plugins/Morpheus/images/action.svg\",…\n## $ actionDetails_0_timestamp        &lt;int&gt; 1716849249, 1716849233, 1716836633, 1…\n## $ goalConversions                  &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ siteCurrency                     &lt;chr&gt; \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"E…\n## $ siteCurrencySymbol               &lt;chr&gt; \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€…\n## $ serverDate                       &lt;chr&gt; \"2024-05-27\", \"2024-05-27\", \"2024-05-…\n## $ visitServerHour                  &lt;int&gt; 20, 20, 17, 17, 16, 15, 15, 14, 14, 1…\n## $ lastActionTimestamp              &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ lastActionDateTime               &lt;chr&gt; \"2024-05-27 20:34:09\", \"2024-05-27 20…\n## $ siteName                         &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ serverTimestamp                  &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ firstActionTimestamp             &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ serverTimePretty                 &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ serverDatePretty                 &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverDatePrettyFirstAction      &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverTimePrettyFirstAction      &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ userId                           &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitorType                      &lt;chr&gt; \"new\", \"new\", \"returning\", \"returning…\n## $ visitorTypeIcon                  &lt;chr&gt; \"\", \"\", \"plugins/Live/images/returnin…\n## $ visitConverted                   &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ visitConvertedIcon               &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitCount                       &lt;int&gt; 1, 1, 7, 22, 1, 1, 140, 1, 139, 138, …\n## $ visitEcommerceStatus             &lt;chr&gt; \"none\", \"none\", \"none\", \"none\", \"none…\n## $ visitEcommerceStatusIcon         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ daysSinceFirstVisit              &lt;int&gt; 0, 0, 10, 46, 0, 0, 84, 0, 84, 84, 48…\n## $ secondsSinceFirstVisit           &lt;int&gt; 0, 0, 882898, 3980095, 0, 0, 7327338,…\n## $ daysSinceLastEcommerceOrder      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ secondsSinceLastEcommerceOrder   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitDuration                    &lt;int&gt; 0, 0, 0, 3547, 31, 0, 1827, 0, 0, 16,…\n## $ visitDurationPretty              &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"31s\",…\n## $ searches                         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0…\n## $ actions                          &lt;int&gt; 1, 1, 1, 118, 3, 1, 16, 1, 1, 7, 139,…\n## $ interactions                     &lt;int&gt; 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 5, 1, 1…\n\n\n\n\n\n\n\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(read_csv)  # dauert etwas...\n## Error in `dplyr::bind_rows()`:\n## ! Can't combine `..1$actionDetails_6_timeSpentPretty` &lt;character&gt; and `..2$actionDetails_6_timeSpentPretty` &lt;double&gt;.\ntoc()\n## 24.43 sec elapsed\n\nLeider mit einem Fehler, weil die Spalte “timespentpretty” einmal als Text und einmal als Zahl interpretiert wird.\nHm, vielleicht so:\n\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(read_csv,\n          col_types = cols(actionDetails_6_timeSpentPretty = col_character()))  # dauert etwas...\n## Error in `dplyr::bind_rows()`:\n## ! Can't combine `..1$actionDetails_2_timeSpentPretty` &lt;double&gt; and `..2$actionDetails_2_timeSpentPretty` &lt;character&gt;.\ntoc()\n## 21.69 sec elapsed\n\nAucht nicht… Wir könnten alle relevanten Spalten suchen und mit col_character umwandeln. Aber probieren wir stattdessen noch etwas anderes.\n\n\n\n\nlibrary(data.table)\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(fread)  # importiert Datendateien schnell\ntoc()\n## 1.66 sec elapsed\n\nSuper schnell! Yeah! Faktor 14!\nMit polars kann man (vielleicht) auch saftige Performanz-Vorteile erzielen. Es gibt auch eine tidypolars-Erweiterung, die die tidyverse-Syntax auf polars-Data-Frames anwendet.\n\n\n\nLeider beschwert sich polar, dass die CSV-Dateien nicht alle die gleiche Anzahl an Spalten haben.\n\npl$scan_csv(datafiles_list)\n## polars LazyFrame\n##  $explain(): Show the optimized query plan.\n## \n## Naive plan:\n## Error: Execution halted with the following contexts\n##    0: In R: in $print():\n##    0: During function call [.main()]\n##    1: Encountered the following error in Rust-Polars:\n##          schema lengths differ: 'csv scan' failed\n\n\n\n\n\nAnteil NAs:\n\nmean(is.na(d))\n## [1] 0.4680727\n\nEchte NAs:\n\nd_with_true_nas &lt;-\n  d |&gt; \n   mutate(across(where(is.factor), as.character)) |&gt; # Faktoren in Strings/Charaketer umwandeln\n   mutate(across(where(is.character), ~ na_if(., \"\")))\n\nDiese Syntax heißt sinngemäß auf Deutsch:\n\nHey R, nimm den Datensatz d\ntransformiere durch alle Spalte, wo der Typ der Spalte “Text” ist wie folgt:\nSetze NA wenn der Wert in der jeweiligen Zelle \"\" ist, also ein leerer Text\n\n\nmean(is.na(d_with_true_nas))\n## [1] 0.8929341\n\nPuh! Das ist ein großer Anteil.\nPrüfen wir das lieber noch einmal.\n\nd_with_true_nas_small &lt;-\n  d_with_true_nas |&gt; \n  select(1:100)\n\n\nvis_dat(d_with_true_nas_small)  # aus `visdat`\n\n\n\n\n\n\n\n\nHm, sieht ja gar nicht nach so vielen NAs aus…\nVielleicht kommen die NAs erst weiter hinten?\n\nd_with_true_nas_small &lt;-\n  d_with_true_nas |&gt; \n  select(3500:3700)\n\n\nvis_dat(d_with_true_nas_small)\n\n\n\n\n\n\n\n\nTatsächlich!\nWas sagt uns dieser Befund?\n\n\n\n\nd_no_empty_cols_no_empty_rows &lt;-\n  d_with_true_nas |&gt; \n  remove_empty(which = c(\"rows\", \"cols\"))  # aus `janitor`\n\nCheck:\n\ndim(d_with_true_nas)\n## [1]  177 7742\n\n\ndim(d_no_empty_cols_no_empty_rows)\n## [1]  177 7671\n\nEin paar Spalten haben wir eingespart.\nEs würde Sinn machen, sich diese komplett leeren Spalten näher anzuschauen. Warum sind sie überhaupt enthalten?\n\n\n\nDas Paket janitor verrichtet “Hausmeisterarbeit” der Datenanalyse, wie etwa das Entfernen von konstanten Spalten.\n\nd_no_constants &lt;- \n  d_no_empty_cols_no_empty_rows |&gt; \n  remove_constant(quiet = FALSE)  # aus `janitor`\n\nEs bietet sich an, dass Ergebnis, d_no_constants abzuspeichern, um damit dann später wieder weiterzuarbeiten.\nMan kann es als CSV-Datei abspeichern:\n\nwrite.csv(d_no_constants, \"data-processed/d_no_constants.csv\")\n\nOder als R-Datendatei:\n\nwrite_rds(d_no_constants, \"data-processed/d_no_constants.rds\")\n\nOder als Excel-Datei:\n\nwritexl::write_xlsx(d_no_constants, \"data-processed/d_no_constants.xlsx\")\n\n\n\n\nEine (große) Menge an Tabellen zu einer Master-Exceltabelle zusammenzufügen ist schwierig. Mit einem Copy-Paste-Ansatz ist es nicht gesichert, dass die richtigen Spalten untereinander gesetzt werden, zumindest prüft es Excel nicht. Bei großen Tabellen wird die Sache unpraktisch (viel Scrollen) und langsam.\nSchließlich – vielleicht am wichtigsten – ist das händische Vorgehen mit Excel nicht reprodzierbar. Es ist also nicht präzise zu beschreiben, was man (genau) gemacht hat. Daher fällt es auch schwierig, Fehler zu finden und den Prozess zu verbessern. Eine klare Kommunikation über das Vorgehen ist kaum möglich.",
    "crumbs": [
      "Lösung 02"
    ]
  },
  {
    "objectID": "challenge02-solution.html#aufgaben",
    "href": "challenge02-solution.html#aufgaben",
    "title": "1 Lösung 02: Daten einlesen",
    "section": "",
    "text": "Daten einlesen\n\nImportieren Sie alle CSV-Dateien in R als Data Frames und binden Sie (zeilenweise) sie zu einem “langen” Data Frame.\nWandeln Sie leere Strings in NAs um (für alle Spalten).\nEntfernen Sie alle leeren Zeilen und Spalten.\nEntfernen Sie alle konstanten Zeilen und Spalten.\nEntfernen Sie alle redundanten Zeilen und Spalten, d.h. Duplikate, also sich wiederholende Zeilen und Spalten.\nÜberlegen Sie die Vor- und Nachteile, wenn Sie diese Aufgaben mit Excel lösen würden.\nExportieren Sie die Datentabelle als Excel-Datei. Prüfen Sie dann die Excel-Datei; fällt Ihnen etwas Besonderes auf?\n\nAusgabeformat: Quarto (Bericht)",
    "crumbs": [
      "Lösung 02"
    ]
  },
  {
    "objectID": "challenge02-solution.html#lösungen",
    "href": "challenge02-solution.html#lösungen",
    "title": "1 Lösung 02: Daten einlesen",
    "section": "",
    "text": "library(tidyverse)\n#library(stringr)  # Strings verarbeiten\nlibrary(here)  # liest aktuelles Verzeichnis aus\nlibrary(visdat)\nlibrary(janitor)\nlibrary(writexl)\nlibrary(tictoc)  # Zeitmessung\nlibrary(polars)\nlibrary(tidypolars)\n\n\n\n\nWir definieren die Liste der zu importierenden CSV-Dateien:\n\ndata_folder &lt;- \"data-processed/data-raw-no-sensitive\"\n\ndatafiles_list &lt;- \n  list.files(path = paste0(here(), \"/\", data_folder),\n             pattern = \"csv$\",\n             full.names = TRUE)\n\nUnd dann importieren wir die CSV-Dateien und “binden” sie “zeilenweise” in einen großen, Gesamt-Data-Frame:\n\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(read.csv)  # dauert etwas...\ntoc()\n## 51.41 sec elapsed\n\n“Funktionales Programmieren” ist ein Paradigma, das in R gut umsetzbar ist.\nEin “klassischer” Ansatz wäre eine For-Schleife, ungefähr so:\n\nout &lt;- list()\nfor (i in 1:length(datafiles_list)) {\n out[[i]] &lt;- read.csv(datafiles_list[i]) \n}\n\nMit .id bekommt man eine laufende Nummer für jede eingehende CSV-Datei.\nPuh! Wenn man jetzt nicht 5 Tage, sondern 100 oder 1000 oder 10000 Tage importieren müsste, hätte man ein echtes Perofrmanzproblem. Könnte man die Dteien nicht schneller einlesen?\nmap_XXX(list, fun) wendet die Funktion fun auf jedes Element von list an. map_dfr ist eine spezielle Variante, die die Ergebnisse in einem Data-Frame zusammenführt und zwar zeilenweise (row), daher _dfr.\nCheck:\n\nd_small &lt;-\n  d |&gt; \n  select(1:50)\n\nd_small |&gt; glimpse()\n## Rows: 177\n## Columns: 50\n## $ X                                &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12…\n## $ idSite                           &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n## $ idVisit                          &lt;int&gt; 2352, 2351, 2350, 2348, 2349, 2347, 2…\n## $ actionDetails_0_type             &lt;chr&gt; \"action\", \"action\", \"action\", \"action…\n## $ actionDetails_0_url              &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_pageTitle        &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_pageIdAction     &lt;int&gt; 1205, 1205, 6641, 5206, 933, 6719, 12…\n## $ actionDetails_0_idpageview       &lt;chr&gt; \"7LcRJ3\", \"fOJq2y\", \"9T74s8\", \"RJKfLz…\n## $ actionDetails_0_serverTimePretty &lt;chr&gt; \"May 27, 2024 22:34:09\", \"May 27, 202…\n## $ actionDetails_0_pageId           &lt;int&gt; 1528485, 1528484, 1528483, 1528362, 1…\n## $ actionDetails_0_timeSpent        &lt;int&gt; 0, 0, 0, 3547, 29, 0, NA, 0, NA, 3, N…\n## $ actionDetails_0_timeSpentPretty  &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"29s\",…\n## $ actionDetails_0_pageviewPosition &lt;int&gt; 1, 1, 1, 1, 1, 1, NA, 1, NA, 1, NA, N…\n## $ actionDetails_0_title            &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_subtitle         &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_icon             &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"plugins/Morp…\n## $ actionDetails_0_iconSVG          &lt;chr&gt; \"plugins/Morpheus/images/action.svg\",…\n## $ actionDetails_0_timestamp        &lt;int&gt; 1716849249, 1716849233, 1716836633, 1…\n## $ goalConversions                  &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ siteCurrency                     &lt;chr&gt; \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"E…\n## $ siteCurrencySymbol               &lt;chr&gt; \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€…\n## $ serverDate                       &lt;chr&gt; \"2024-05-27\", \"2024-05-27\", \"2024-05-…\n## $ visitServerHour                  &lt;int&gt; 20, 20, 17, 17, 16, 15, 15, 14, 14, 1…\n## $ lastActionTimestamp              &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ lastActionDateTime               &lt;chr&gt; \"2024-05-27 20:34:09\", \"2024-05-27 20…\n## $ siteName                         &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ serverTimestamp                  &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ firstActionTimestamp             &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ serverTimePretty                 &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ serverDatePretty                 &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverDatePrettyFirstAction      &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverTimePrettyFirstAction      &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ userId                           &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitorType                      &lt;chr&gt; \"new\", \"new\", \"returning\", \"returning…\n## $ visitorTypeIcon                  &lt;chr&gt; \"\", \"\", \"plugins/Live/images/returnin…\n## $ visitConverted                   &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ visitConvertedIcon               &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitCount                       &lt;int&gt; 1, 1, 7, 22, 1, 1, 140, 1, 139, 138, …\n## $ visitEcommerceStatus             &lt;chr&gt; \"none\", \"none\", \"none\", \"none\", \"none…\n## $ visitEcommerceStatusIcon         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ daysSinceFirstVisit              &lt;int&gt; 0, 0, 10, 46, 0, 0, 84, 0, 84, 84, 48…\n## $ secondsSinceFirstVisit           &lt;int&gt; 0, 0, 882898, 3980095, 0, 0, 7327338,…\n## $ daysSinceLastEcommerceOrder      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ secondsSinceLastEcommerceOrder   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitDuration                    &lt;int&gt; 0, 0, 0, 3547, 31, 0, 1827, 0, 0, 16,…\n## $ visitDurationPretty              &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"31s\",…\n## $ searches                         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0…\n## $ actions                          &lt;int&gt; 1, 1, 1, 118, 3, 1, 16, 1, 1, 7, 139,…\n## $ interactions                     &lt;int&gt; 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 5, 1, 1…\n## $ referrerType                     &lt;chr&gt; \"direct\", \"direct\", \"direct\", \"websit…\n\nScheint zu passen.\nAlternativ kann man den Namen der Datei hinzufügen:\n\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(~ read.csv(.x) |&gt; \n            mutate(filename = basename(.x)))  # dauert etwas ...\n\nDie Tilde-Notation ~ ist eine Kurzschreibweise für eine Funktion. Man könnte also auch schreiben:\n\nmeine_funktion &lt;- function(x) {\n  read.csv(x) |&gt; \n    mutate(filename = basename(x))\n}\n\n\ndatafiles_list |&gt; \n  map_dfr(meine_funktion)\n\nExkurs: Noch etwas Erklärung zu map. map ist eine Art von “Schleife”: Die darauf bezogene Funktion wird für jedes Element der Liste ausgeführt. Im folgenden Beispiel wird die Funktion basename auf jedes Element der Liste datafiles_list angewendet, also der Dateiname ohne Pfad zurückgegeben.\n\ndatafiles_list |&gt; \n  map(basename)\n## [[1]]\n## [1] \"matomo_export_2024-05-27.csv\"\n## \n## [[2]]\n## [1] \"matomo_export_2024-05-28.csv\"\n## \n## [[3]]\n## [1] \"matomo_export_2024-05-29.csv\"\n## \n## [[4]]\n## [1] \"matomo_export_2024-05-30.csv\"\n## \n## [[5]]\n## [1] \"matomo_export_2024-05-31.csv\"\n## \n## [[6]]\n## [1] \"matomo_export_2024-06-01.csv\"\n## \n## [[7]]\n## [1] \"matomo_export_2024-06-02.csv\"\n## \n## [[8]]\n## [1] \"matomo_export_2024-06-03.csv\"\n\nCheck:\n\nd_small &lt;-\n  d |&gt; \n  select(filename, everything()) |&gt;  # `filename` nach vorne ziehen\n  select(1:50)\n\nd_small |&gt; glimpse()  # Blick reinwerfen\n## Rows: 177\n## Columns: 50\n## $ filename                         &lt;chr&gt; \"matomo_export_2024-05-27.csv\", \"mato…\n## $ X                                &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12…\n## $ idSite                           &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n## $ idVisit                          &lt;int&gt; 2352, 2351, 2350, 2348, 2349, 2347, 2…\n## $ actionDetails_0_type             &lt;chr&gt; \"action\", \"action\", \"action\", \"action…\n## $ actionDetails_0_url              &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_pageTitle        &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_pageIdAction     &lt;int&gt; 1205, 1205, 6641, 5206, 933, 6719, 12…\n## $ actionDetails_0_idpageview       &lt;chr&gt; \"7LcRJ3\", \"fOJq2y\", \"9T74s8\", \"RJKfLz…\n## $ actionDetails_0_serverTimePretty &lt;chr&gt; \"May 27, 2024 22:34:09\", \"May 27, 202…\n## $ actionDetails_0_pageId           &lt;int&gt; 1528485, 1528484, 1528483, 1528362, 1…\n## $ actionDetails_0_timeSpent        &lt;int&gt; 0, 0, 0, 3547, 29, 0, NA, 0, NA, 3, N…\n## $ actionDetails_0_timeSpentPretty  &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"29s\",…\n## $ actionDetails_0_pageviewPosition &lt;int&gt; 1, 1, 1, 1, 1, 1, NA, 1, NA, 1, NA, N…\n## $ actionDetails_0_title            &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ actionDetails_0_subtitle         &lt;chr&gt; \"https://141.75.89.55/login?evalId=no…\n## $ actionDetails_0_icon             &lt;chr&gt; \"\", \"\", \"\", \"\", \"\", \"\", \"plugins/Morp…\n## $ actionDetails_0_iconSVG          &lt;chr&gt; \"plugins/Morpheus/images/action.svg\",…\n## $ actionDetails_0_timestamp        &lt;int&gt; 1716849249, 1716849233, 1716836633, 1…\n## $ goalConversions                  &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ siteCurrency                     &lt;chr&gt; \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"EUR\", \"E…\n## $ siteCurrencySymbol               &lt;chr&gt; \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€\", \"€…\n## $ serverDate                       &lt;chr&gt; \"2024-05-27\", \"2024-05-27\", \"2024-05-…\n## $ visitServerHour                  &lt;int&gt; 20, 20, 17, 17, 16, 15, 15, 14, 14, 1…\n## $ lastActionTimestamp              &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ lastActionDateTime               &lt;chr&gt; \"2024-05-27 20:34:09\", \"2024-05-27 20…\n## $ siteName                         &lt;chr&gt; \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS\", \"HAnS…\n## $ serverTimestamp                  &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ firstActionTimestamp             &lt;int&gt; 1716842049, 1716842033, 1716829433, 1…\n## $ serverTimePretty                 &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ serverDatePretty                 &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverDatePrettyFirstAction      &lt;chr&gt; \"Monday, May 27, 2024\", \"Monday, May …\n## $ serverTimePrettyFirstAction      &lt;chr&gt; \"22:34:09\", \"22:33:53\", \"19:03:53\", \"…\n## $ userId                           &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitorType                      &lt;chr&gt; \"new\", \"new\", \"returning\", \"returning…\n## $ visitorTypeIcon                  &lt;chr&gt; \"\", \"\", \"plugins/Live/images/returnin…\n## $ visitConverted                   &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ visitConvertedIcon               &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitCount                       &lt;int&gt; 1, 1, 7, 22, 1, 1, 140, 1, 139, 138, …\n## $ visitEcommerceStatus             &lt;chr&gt; \"none\", \"none\", \"none\", \"none\", \"none…\n## $ visitEcommerceStatusIcon         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ daysSinceFirstVisit              &lt;int&gt; 0, 0, 10, 46, 0, 0, 84, 0, 84, 84, 48…\n## $ secondsSinceFirstVisit           &lt;int&gt; 0, 0, 882898, 3980095, 0, 0, 7327338,…\n## $ daysSinceLastEcommerceOrder      &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n## $ secondsSinceLastEcommerceOrder   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n## $ visitDuration                    &lt;int&gt; 0, 0, 0, 3547, 31, 0, 1827, 0, 0, 16,…\n## $ visitDurationPretty              &lt;chr&gt; \"0s\", \"0s\", \"0s\", \"59 min 7s\", \"31s\",…\n## $ searches                         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0…\n## $ actions                          &lt;int&gt; 1, 1, 1, 118, 3, 1, 16, 1, 1, 7, 139,…\n## $ interactions                     &lt;int&gt; 1, 1, 1, 1, 2, 1, 0, 1, 0, 2, 5, 1, 1…\n\n\n\n\n\n\n\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(read_csv)  # dauert etwas...\n## Error in `dplyr::bind_rows()`:\n## ! Can't combine `..1$actionDetails_6_timeSpentPretty` &lt;character&gt; and `..2$actionDetails_6_timeSpentPretty` &lt;double&gt;.\ntoc()\n## 24.43 sec elapsed\n\nLeider mit einem Fehler, weil die Spalte “timespentpretty” einmal als Text und einmal als Zahl interpretiert wird.\nHm, vielleicht so:\n\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(read_csv,\n          col_types = cols(actionDetails_6_timeSpentPretty = col_character()))  # dauert etwas...\n## Error in `dplyr::bind_rows()`:\n## ! Can't combine `..1$actionDetails_2_timeSpentPretty` &lt;double&gt; and `..2$actionDetails_2_timeSpentPretty` &lt;character&gt;.\ntoc()\n## 21.69 sec elapsed\n\nAucht nicht… Wir könnten alle relevanten Spalten suchen und mit col_character umwandeln. Aber probieren wir stattdessen noch etwas anderes.\n\n\n\n\nlibrary(data.table)\ntic()  # `tictoc`\nd &lt;- \ndatafiles_list |&gt; \n  map_dfr(fread)  # importiert Datendateien schnell\ntoc()\n## 1.66 sec elapsed\n\nSuper schnell! Yeah! Faktor 14!\nMit polars kann man (vielleicht) auch saftige Performanz-Vorteile erzielen. Es gibt auch eine tidypolars-Erweiterung, die die tidyverse-Syntax auf polars-Data-Frames anwendet.\n\n\n\nLeider beschwert sich polar, dass die CSV-Dateien nicht alle die gleiche Anzahl an Spalten haben.\n\npl$scan_csv(datafiles_list)\n## polars LazyFrame\n##  $explain(): Show the optimized query plan.\n## \n## Naive plan:\n## Error: Execution halted with the following contexts\n##    0: In R: in $print():\n##    0: During function call [.main()]\n##    1: Encountered the following error in Rust-Polars:\n##          schema lengths differ: 'csv scan' failed\n\n\n\n\n\nAnteil NAs:\n\nmean(is.na(d))\n## [1] 0.4680727\n\nEchte NAs:\n\nd_with_true_nas &lt;-\n  d |&gt; \n   mutate(across(where(is.factor), as.character)) |&gt; # Faktoren in Strings/Charaketer umwandeln\n   mutate(across(where(is.character), ~ na_if(., \"\")))\n\nDiese Syntax heißt sinngemäß auf Deutsch:\n\nHey R, nimm den Datensatz d\ntransformiere durch alle Spalte, wo der Typ der Spalte “Text” ist wie folgt:\nSetze NA wenn der Wert in der jeweiligen Zelle \"\" ist, also ein leerer Text\n\n\nmean(is.na(d_with_true_nas))\n## [1] 0.8929341\n\nPuh! Das ist ein großer Anteil.\nPrüfen wir das lieber noch einmal.\n\nd_with_true_nas_small &lt;-\n  d_with_true_nas |&gt; \n  select(1:100)\n\n\nvis_dat(d_with_true_nas_small)  # aus `visdat`\n\n\n\n\n\n\n\n\nHm, sieht ja gar nicht nach so vielen NAs aus…\nVielleicht kommen die NAs erst weiter hinten?\n\nd_with_true_nas_small &lt;-\n  d_with_true_nas |&gt; \n  select(3500:3700)\n\n\nvis_dat(d_with_true_nas_small)\n\n\n\n\n\n\n\n\nTatsächlich!\nWas sagt uns dieser Befund?\n\n\n\n\nd_no_empty_cols_no_empty_rows &lt;-\n  d_with_true_nas |&gt; \n  remove_empty(which = c(\"rows\", \"cols\"))  # aus `janitor`\n\nCheck:\n\ndim(d_with_true_nas)\n## [1]  177 7742\n\n\ndim(d_no_empty_cols_no_empty_rows)\n## [1]  177 7671\n\nEin paar Spalten haben wir eingespart.\nEs würde Sinn machen, sich diese komplett leeren Spalten näher anzuschauen. Warum sind sie überhaupt enthalten?\n\n\n\nDas Paket janitor verrichtet “Hausmeisterarbeit” der Datenanalyse, wie etwa das Entfernen von konstanten Spalten.\n\nd_no_constants &lt;- \n  d_no_empty_cols_no_empty_rows |&gt; \n  remove_constant(quiet = FALSE)  # aus `janitor`\n\nEs bietet sich an, dass Ergebnis, d_no_constants abzuspeichern, um damit dann später wieder weiterzuarbeiten.\nMan kann es als CSV-Datei abspeichern:\n\nwrite.csv(d_no_constants, \"data-processed/d_no_constants.csv\")\n\nOder als R-Datendatei:\n\nwrite_rds(d_no_constants, \"data-processed/d_no_constants.rds\")\n\nOder als Excel-Datei:\n\nwritexl::write_xlsx(d_no_constants, \"data-processed/d_no_constants.xlsx\")\n\n\n\n\nEine (große) Menge an Tabellen zu einer Master-Exceltabelle zusammenzufügen ist schwierig. Mit einem Copy-Paste-Ansatz ist es nicht gesichert, dass die richtigen Spalten untereinander gesetzt werden, zumindest prüft es Excel nicht. Bei großen Tabellen wird die Sache unpraktisch (viel Scrollen) und langsam.\nSchließlich – vielleicht am wichtigsten – ist das händische Vorgehen mit Excel nicht reprodzierbar. Es ist also nicht präzise zu beschreiben, was man (genau) gemacht hat. Daher fällt es auch schwierig, Fehler zu finden und den Prozess zu verbessern. Eine klare Kommunikation über das Vorgehen ist kaum möglich.",
    "crumbs": [
      "Lösung 02"
    ]
  },
  {
    "objectID": "projektmanagement.html",
    "href": "projektmanagement.html",
    "title": "1 Projektmanagement",
    "section": "",
    "text": "1 Projektmanagement\nEine Analyse mit vielen Schritten kann leicht unübersichtlich werden. Ein anderes Problem ist, dass man viele Objekte erzeugt, als Ergebnisse der Zwischenschritte. Ändert man einen Zwischenschritt, so ändert sich der Input für alle darauf folgende Analyseschritte. Man muss also diese neu berechnen. Gefährlich wäre, würde man vergessen, diese Objekte neu zu berechnen: Man würde mit einem “veralteten” also falschen Objekt weiterarbeiten, was zwangsläufig zu falschen Ergebnissen führten würde.\nWäre es nicht schön, wenn es ein Tool gäbe, das für Sie den Überblick behält und dafür sorgt, dass die veralteten Objekte (und nur die) bei Bedarf neu berechnet werden?\nSolche Tools gibt es. Wir schauen uns dazu das Tool targets an.\nHier ist ein erstes Beispiel, und hier ist eine weitere Einführung in Targets.\nDiese Präsentation führt in Targets ein mit einer Data-Science-Anwendung.\n\n\n\n\nWiederverwendungMITZitatMit BibTeX zitieren:@online{untitled,\n  author = {},\n  langid = {de-DE}\n}\nBitte zitieren Sie diese Arbeit als:\nn.d.",
    "crumbs": [
      "Projektmanagement"
    ]
  },
  {
    "objectID": "challenge03-solution.html",
    "href": "challenge03-solution.html",
    "title": "Challenge 03 – Solution",
    "section": "",
    "text": "Datensatz verschlanken\nAufbauend auf dem Ergebnis der letzten Challenge:\n\nWelche Spalten halten Sie für nicht relevant, um das Nutzerverhalten besser zu verstehen?. Begründen Sie die Auswahl.\nEntfernen Sie redundante Spalten (nach eigenem Ermessen und mit Begründung).\nBehalten Sie - neben allgemeinen Informationen zum Nutzer - nur die Spalten mit subtitle und timestamp im Namen.\nReparieren Sie die Spalten mit Datumsangaben.\nEntfernen Sie Spalten, die Bilddaten enthalten.\nEntfernen Sie Zeilen, die Daten von Admins, Developern oder lecturers enthalten.\n\nAusgabeformat: Quarto (Bericht)\n\n\n\n\n\n\nlibrary(tidyverse)\n#library(stringr)  # Strings verarbeiten\nlibrary(here)  # liest aktuelles Verzeichnis aus\nlibrary(lubridate)  # Mit Zeitangaben arbeiten\n\nWir laden den Datensatz, wie im letzten Schritt herausgegangen:\n\nd &lt;- read_rds(file = paste0(here(), \"/\", \"data-processed/d_no_constants.rds\"))\n\n\n\n\nWas waren nochmal die uniquen Spaltennamen?\nPuh, am besten (?) wir berechnen diese noch einmal:\n\nunique_names &lt;- \nstr_remove(string = names(d),\n           pattern = \"_[:digit:].*\") |&gt; \n  unique()\n\nunique_names\n##  [1] \"X\"                           \"idVisit\"                    \n##  [3] \"actionDetails\"               \"serverDate\"                 \n##  [5] \"visitServerHour\"             \"lastActionTimestamp\"        \n##  [7] \"lastActionDateTime\"          \"serverTimestamp\"            \n##  [9] \"firstActionTimestamp\"        \"serverTimePretty\"           \n## [11] \"serverDatePretty\"            \"serverDatePrettyFirstAction\"\n## [13] \"serverTimePrettyFirstAction\" \"visitorType\"                \n## [15] \"visitorTypeIcon\"             \"visitCount\"                 \n## [17] \"daysSinceFirstVisit\"         \"secondsSinceFirstVisit\"     \n## [19] \"visitDuration\"               \"visitDurationPretty\"        \n## [21] \"searches\"                    \"actions\"                    \n## [23] \"interactions\"                \"referrerType\"               \n## [25] \"referrerTypeName\"            \"referrerName\"               \n## [27] \"referrerKeyword\"             \"referrerUrl\"                \n## [29] \"referrerSearchEngineUrl\"     \"referrerSearchEngineIcon\"   \n## [31] \"languageCode\"                \"language\"                   \n## [33] \"deviceType\"                  \"deviceTypeIcon\"             \n## [35] \"deviceBrand\"                 \"deviceModel\"                \n## [37] \"operatingSystem\"             \"operatingSystemName\"        \n## [39] \"operatingSystemIcon\"         \"operatingSystemCode\"        \n## [41] \"operatingSystemVersion\"      \"browserFamily\"              \n## [43] \"browserFamilyDescription\"    \"browser\"                    \n## [45] \"browserName\"                 \"browserIcon\"                \n## [47] \"browserCode\"                 \"browserVersion\"             \n## [49] \"events\"                      \"continent\"                  \n## [51] \"continentCode\"               \"country\"                    \n## [53] \"countryCode\"                 \"countryFlag\"                \n## [55] \"location\"                    \"visitLocalTime\"             \n## [57] \"visitLocalHour\"              \"daysSinceLastVisit\"         \n## [59] \"secondsSinceLastVisit\"       \"resolution\"                 \n## [61] \"plugins\"                     \"pluginsIcons\"               \n## [63] \"customVariables\"             \"filename\"                   \n## [65] \"truncatedActionsCount\"\n\nBetrachtet man die Spalten, und fragt sich, was die Nutzer denn so machen, so erscheinen die Spalten mit subtitle im Namen als besonders aussagekräftig. Allerdings könnten auch die Zeit-Informationen interessant sein: serverDate etc.\n\n\n\nBegrenzen wir uns hier daher erstmal auf subtitle und Zeitangaben timestamp. Die übrigen Spalten entfernen wir fürs Erste (s. der folgende Abschnitt).\n\n\n\n\nd_only_subtitles_and_timestamps &lt;-\n  d |&gt; select(idVisit, contains(\"subtitle\"), contains(\"timestamp\"))\n\nSchon deutlich (etwas) übersichtlicher.\n\n\n\nSchauen wir uns die ersten Werte vom ersten Zeitstamp an:\n\nd_only_subtitles_and_timestamps$actionDetails_0_timestamp |&gt; as.numeric() |&gt; head()\n## [1] 1716849249 1716849233 1716836633 1716833045 1716835821 1716832271\n\nHm, und wenn wir einfach die Spalte nehmen und sagen du erscheinst jetzt gefälligst als Datums-/Zeitangabe?\nAlso as_datetime?\nProbieren wir’s:\n\nd_only_subtitles_and_timestamps |&gt; \n  select(actionDetails_0_timestamp) |&gt; \n  mutate(actionDetails_0_timestamp = as_datetime(actionDetails_0_timestamp)) |&gt;  # aus `lubridate`\n  head()\n##   actionDetails_0_timestamp\n## 1       2024-05-27 22:34:09\n## 2       2024-05-27 22:33:53\n## 3       2024-05-27 19:03:53\n## 4       2024-05-27 18:04:05\n## 5       2024-05-27 18:50:21\n## 6       2024-05-27 17:51:11\n\nYeah, klapp!\nDas machen wir mit allen Zeitangaben:\n\nd_time_repaired &lt;- \nd_only_subtitles_and_timestamps |&gt; \n   mutate(across(contains(\"timestamp\"), ~ as_datetime(as.numeric(.x))))\n\nCheck:\n\nd_check &lt;- \nd_time_repaired |&gt; \n  select(contains(\"timestamp\")) |&gt; \n  select(1:50) \n\nd_check |&gt; \n  head()\n##   actionDetails_0_timestamp lastActionTimestamp     serverTimestamp\n## 1       2024-05-27 22:34:09 2024-05-27 20:34:09 2024-05-27 20:34:09\n## 2       2024-05-27 22:33:53 2024-05-27 20:33:53 2024-05-27 20:33:53\n## 3       2024-05-27 19:03:53 2024-05-27 17:03:53 2024-05-27 17:03:53\n## 4       2024-05-27 18:04:05 2024-05-27 17:03:11 2024-05-27 17:03:11\n## 5       2024-05-27 18:50:21 2024-05-27 16:50:51 2024-05-27 16:50:51\n## 6       2024-05-27 17:51:11 2024-05-27 15:51:11 2024-05-27 15:51:11\n##   firstActionTimestamp actionDetails_1_timestamp actionDetails_2_timestamp\n## 1  2024-05-27 20:34:09                      &lt;NA&gt;                      &lt;NA&gt;\n## 2  2024-05-27 20:33:53                      &lt;NA&gt;                      &lt;NA&gt;\n## 3  2024-05-27 17:03:53                      &lt;NA&gt;                      &lt;NA&gt;\n## 4  2024-05-27 16:04:05       2024-05-27 18:04:26       2024-05-27 18:04:41\n## 5  2024-05-27 16:50:21       2024-05-27 18:50:50       2024-05-27 18:50:51\n## 6  2024-05-27 15:51:11                      &lt;NA&gt;                      &lt;NA&gt;\n##   actionDetails_3_timestamp actionDetails_4_timestamp actionDetails_5_timestamp\n## 1                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 2                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 3                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 4       2024-05-27 18:04:41       2024-05-27 18:04:41       2024-05-27 18:05:41\n## 5                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 6                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n##   actionDetails_6_timestamp actionDetails_7_timestamp actionDetails_8_timestamp\n## 1                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 2                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 3                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 4       2024-05-27 18:05:56       2024-05-27 18:06:11       2024-05-27 18:06:11\n## 5                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 6                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n##   actionDetails_9_timestamp actionDetails_10_timestamp\n## 1                      &lt;NA&gt;                       &lt;NA&gt;\n## 2                      &lt;NA&gt;                       &lt;NA&gt;\n## 3                      &lt;NA&gt;                       &lt;NA&gt;\n## 4       2024-05-27 18:06:11        2024-05-27 18:06:11\n## 5                      &lt;NA&gt;                       &lt;NA&gt;\n## 6                      &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_11_timestamp actionDetails_12_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:11        2024-05-27 18:06:12\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_13_timestamp actionDetails_14_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:12        2024-05-27 18:06:12\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_15_timestamp actionDetails_16_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:13        2024-05-27 18:06:13\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_17_timestamp actionDetails_18_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:15        2024-05-27 18:06:15\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_19_timestamp actionDetails_20_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:15        2024-05-27 18:06:15\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_21_timestamp actionDetails_22_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:16        2024-05-27 18:06:18\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_23_timestamp actionDetails_24_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:35        2024-05-27 18:06:36\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_25_timestamp actionDetails_26_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:36        2024-05-27 18:06:37\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_27_timestamp actionDetails_28_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:45        2024-05-27 18:06:47\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_29_timestamp actionDetails_30_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:49        2024-05-27 18:07:18\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_31_timestamp actionDetails_32_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:07:35        2024-05-27 18:08:06\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_33_timestamp actionDetails_34_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:08:08        2024-05-27 18:08:40\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_35_timestamp actionDetails_36_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:08:49        2024-05-27 18:08:55\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_37_timestamp actionDetails_38_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:09:55        2024-05-27 18:09:59\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_39_timestamp actionDetails_40_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:10:00        2024-05-27 18:10:41\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_41_timestamp actionDetails_42_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:10:41        2024-05-27 18:12:15\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_43_timestamp actionDetails_44_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:12:52        2024-05-27 18:12:54\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_45_timestamp actionDetails_46_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:17:30        2024-05-27 18:17:30\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n\nPasst!\n\n\n\nHaben wir schon automatisch oben miterledigt.\n\n\n\nHm, wo ist diese Information? Ah, in den URLs ist sie versteckt…\nSchauen Sie mal z.B. hier:\n\nd_time_repaired |&gt; \n  select(actionDetails_0_subtitle) |&gt; \n  filter(str_detect(actionDetails_0_subtitle, \"developer\")) \n##                                                                 actionDetails_0_subtitle\n## 1 https://hans.th-nuernberg.de/?evalId=none&user=pixi24%40th-nuernberg.de&role=developer\n## 2 https://hans.th-nuernberg.de/?evalId=none&user=pixi24%40th-nuernberg.de&role=developer\n\nAnalog für Admins und Lecturer:\n\nd_time_repaired |&gt; \n  select(actionDetails_0_subtitle) |&gt; \n  filter(str_detect(actionDetails_0_subtitle, \"lecturer\")) \n##                                                                                        actionDetails_0_subtitle\n## 1                         https://hans.th-nuernberg.de/?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 2 https://th-nuernberg.de&password=wv3o4aaixav7u3/login?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 3                         https://hans.th-nuernberg.de/?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 4                         https://hans.th-nuernberg.de/?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 5                               Category: \"click_videocard_search_lecturer', Action: \"Prof. Dr. Irmtraud Horst\"\n## 6         https://hans.th-nuernberg.de/login?evalId=none&user=wi.professor.quame1%40hs-ansbach.de&role=lecturer\n\nDiese Zeilen sollen (wollen?) wir also entfernen:\n\nd_students_only &lt;-\nd_time_repaired |&gt; \n  filter(!str_detect(actionDetails_0_subtitle, \"developer|lecturer|admin\")) \n\nDer vertikale Balken | steht für das logische “Oder” in Regex.\n\n\n\n\nSpeichern wir das resultierende Objekt ab, damit wir für künftige Aufgaben damit weiterarbeiten können.\n\nwrite_rds(d_students_only, \"data-processed/d_no_students.rds\")\nwrite_csv(d_students_only, \"data-processed/d_no_students.csv\")",
    "crumbs": [
      "Lösung 03"
    ]
  },
  {
    "objectID": "challenge03-solution.html#aufgaben",
    "href": "challenge03-solution.html#aufgaben",
    "title": "Challenge 03 – Solution",
    "section": "",
    "text": "Datensatz verschlanken\nAufbauend auf dem Ergebnis der letzten Challenge:\n\nWelche Spalten halten Sie für nicht relevant, um das Nutzerverhalten besser zu verstehen?. Begründen Sie die Auswahl.\nEntfernen Sie redundante Spalten (nach eigenem Ermessen und mit Begründung).\nBehalten Sie - neben allgemeinen Informationen zum Nutzer - nur die Spalten mit subtitle und timestamp im Namen.\nReparieren Sie die Spalten mit Datumsangaben.\nEntfernen Sie Spalten, die Bilddaten enthalten.\nEntfernen Sie Zeilen, die Daten von Admins, Developern oder lecturers enthalten.\n\nAusgabeformat: Quarto (Bericht)",
    "crumbs": [
      "Lösung 03"
    ]
  },
  {
    "objectID": "challenge03-solution.html#lösungen",
    "href": "challenge03-solution.html#lösungen",
    "title": "Challenge 03 – Solution",
    "section": "",
    "text": "library(tidyverse)\n#library(stringr)  # Strings verarbeiten\nlibrary(here)  # liest aktuelles Verzeichnis aus\nlibrary(lubridate)  # Mit Zeitangaben arbeiten\n\nWir laden den Datensatz, wie im letzten Schritt herausgegangen:\n\nd &lt;- read_rds(file = paste0(here(), \"/\", \"data-processed/d_no_constants.rds\"))\n\n\n\n\nWas waren nochmal die uniquen Spaltennamen?\nPuh, am besten (?) wir berechnen diese noch einmal:\n\nunique_names &lt;- \nstr_remove(string = names(d),\n           pattern = \"_[:digit:].*\") |&gt; \n  unique()\n\nunique_names\n##  [1] \"X\"                           \"idVisit\"                    \n##  [3] \"actionDetails\"               \"serverDate\"                 \n##  [5] \"visitServerHour\"             \"lastActionTimestamp\"        \n##  [7] \"lastActionDateTime\"          \"serverTimestamp\"            \n##  [9] \"firstActionTimestamp\"        \"serverTimePretty\"           \n## [11] \"serverDatePretty\"            \"serverDatePrettyFirstAction\"\n## [13] \"serverTimePrettyFirstAction\" \"visitorType\"                \n## [15] \"visitorTypeIcon\"             \"visitCount\"                 \n## [17] \"daysSinceFirstVisit\"         \"secondsSinceFirstVisit\"     \n## [19] \"visitDuration\"               \"visitDurationPretty\"        \n## [21] \"searches\"                    \"actions\"                    \n## [23] \"interactions\"                \"referrerType\"               \n## [25] \"referrerTypeName\"            \"referrerName\"               \n## [27] \"referrerKeyword\"             \"referrerUrl\"                \n## [29] \"referrerSearchEngineUrl\"     \"referrerSearchEngineIcon\"   \n## [31] \"languageCode\"                \"language\"                   \n## [33] \"deviceType\"                  \"deviceTypeIcon\"             \n## [35] \"deviceBrand\"                 \"deviceModel\"                \n## [37] \"operatingSystem\"             \"operatingSystemName\"        \n## [39] \"operatingSystemIcon\"         \"operatingSystemCode\"        \n## [41] \"operatingSystemVersion\"      \"browserFamily\"              \n## [43] \"browserFamilyDescription\"    \"browser\"                    \n## [45] \"browserName\"                 \"browserIcon\"                \n## [47] \"browserCode\"                 \"browserVersion\"             \n## [49] \"events\"                      \"continent\"                  \n## [51] \"continentCode\"               \"country\"                    \n## [53] \"countryCode\"                 \"countryFlag\"                \n## [55] \"location\"                    \"visitLocalTime\"             \n## [57] \"visitLocalHour\"              \"daysSinceLastVisit\"         \n## [59] \"secondsSinceLastVisit\"       \"resolution\"                 \n## [61] \"plugins\"                     \"pluginsIcons\"               \n## [63] \"customVariables\"             \"filename\"                   \n## [65] \"truncatedActionsCount\"\n\nBetrachtet man die Spalten, und fragt sich, was die Nutzer denn so machen, so erscheinen die Spalten mit subtitle im Namen als besonders aussagekräftig. Allerdings könnten auch die Zeit-Informationen interessant sein: serverDate etc.\n\n\n\nBegrenzen wir uns hier daher erstmal auf subtitle und Zeitangaben timestamp. Die übrigen Spalten entfernen wir fürs Erste (s. der folgende Abschnitt).\n\n\n\n\nd_only_subtitles_and_timestamps &lt;-\n  d |&gt; select(idVisit, contains(\"subtitle\"), contains(\"timestamp\"))\n\nSchon deutlich (etwas) übersichtlicher.\n\n\n\nSchauen wir uns die ersten Werte vom ersten Zeitstamp an:\n\nd_only_subtitles_and_timestamps$actionDetails_0_timestamp |&gt; as.numeric() |&gt; head()\n## [1] 1716849249 1716849233 1716836633 1716833045 1716835821 1716832271\n\nHm, und wenn wir einfach die Spalte nehmen und sagen du erscheinst jetzt gefälligst als Datums-/Zeitangabe?\nAlso as_datetime?\nProbieren wir’s:\n\nd_only_subtitles_and_timestamps |&gt; \n  select(actionDetails_0_timestamp) |&gt; \n  mutate(actionDetails_0_timestamp = as_datetime(actionDetails_0_timestamp)) |&gt;  # aus `lubridate`\n  head()\n##   actionDetails_0_timestamp\n## 1       2024-05-27 22:34:09\n## 2       2024-05-27 22:33:53\n## 3       2024-05-27 19:03:53\n## 4       2024-05-27 18:04:05\n## 5       2024-05-27 18:50:21\n## 6       2024-05-27 17:51:11\n\nYeah, klapp!\nDas machen wir mit allen Zeitangaben:\n\nd_time_repaired &lt;- \nd_only_subtitles_and_timestamps |&gt; \n   mutate(across(contains(\"timestamp\"), ~ as_datetime(as.numeric(.x))))\n\nCheck:\n\nd_check &lt;- \nd_time_repaired |&gt; \n  select(contains(\"timestamp\")) |&gt; \n  select(1:50) \n\nd_check |&gt; \n  head()\n##   actionDetails_0_timestamp lastActionTimestamp     serverTimestamp\n## 1       2024-05-27 22:34:09 2024-05-27 20:34:09 2024-05-27 20:34:09\n## 2       2024-05-27 22:33:53 2024-05-27 20:33:53 2024-05-27 20:33:53\n## 3       2024-05-27 19:03:53 2024-05-27 17:03:53 2024-05-27 17:03:53\n## 4       2024-05-27 18:04:05 2024-05-27 17:03:11 2024-05-27 17:03:11\n## 5       2024-05-27 18:50:21 2024-05-27 16:50:51 2024-05-27 16:50:51\n## 6       2024-05-27 17:51:11 2024-05-27 15:51:11 2024-05-27 15:51:11\n##   firstActionTimestamp actionDetails_1_timestamp actionDetails_2_timestamp\n## 1  2024-05-27 20:34:09                      &lt;NA&gt;                      &lt;NA&gt;\n## 2  2024-05-27 20:33:53                      &lt;NA&gt;                      &lt;NA&gt;\n## 3  2024-05-27 17:03:53                      &lt;NA&gt;                      &lt;NA&gt;\n## 4  2024-05-27 16:04:05       2024-05-27 18:04:26       2024-05-27 18:04:41\n## 5  2024-05-27 16:50:21       2024-05-27 18:50:50       2024-05-27 18:50:51\n## 6  2024-05-27 15:51:11                      &lt;NA&gt;                      &lt;NA&gt;\n##   actionDetails_3_timestamp actionDetails_4_timestamp actionDetails_5_timestamp\n## 1                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 2                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 3                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 4       2024-05-27 18:04:41       2024-05-27 18:04:41       2024-05-27 18:05:41\n## 5                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 6                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n##   actionDetails_6_timestamp actionDetails_7_timestamp actionDetails_8_timestamp\n## 1                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 2                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 3                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 4       2024-05-27 18:05:56       2024-05-27 18:06:11       2024-05-27 18:06:11\n## 5                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n## 6                      &lt;NA&gt;                      &lt;NA&gt;                      &lt;NA&gt;\n##   actionDetails_9_timestamp actionDetails_10_timestamp\n## 1                      &lt;NA&gt;                       &lt;NA&gt;\n## 2                      &lt;NA&gt;                       &lt;NA&gt;\n## 3                      &lt;NA&gt;                       &lt;NA&gt;\n## 4       2024-05-27 18:06:11        2024-05-27 18:06:11\n## 5                      &lt;NA&gt;                       &lt;NA&gt;\n## 6                      &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_11_timestamp actionDetails_12_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:11        2024-05-27 18:06:12\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_13_timestamp actionDetails_14_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:12        2024-05-27 18:06:12\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_15_timestamp actionDetails_16_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:13        2024-05-27 18:06:13\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_17_timestamp actionDetails_18_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:15        2024-05-27 18:06:15\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_19_timestamp actionDetails_20_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:15        2024-05-27 18:06:15\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_21_timestamp actionDetails_22_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:16        2024-05-27 18:06:18\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_23_timestamp actionDetails_24_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:35        2024-05-27 18:06:36\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_25_timestamp actionDetails_26_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:36        2024-05-27 18:06:37\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_27_timestamp actionDetails_28_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:45        2024-05-27 18:06:47\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_29_timestamp actionDetails_30_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:06:49        2024-05-27 18:07:18\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_31_timestamp actionDetails_32_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:07:35        2024-05-27 18:08:06\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_33_timestamp actionDetails_34_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:08:08        2024-05-27 18:08:40\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_35_timestamp actionDetails_36_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:08:49        2024-05-27 18:08:55\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_37_timestamp actionDetails_38_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:09:55        2024-05-27 18:09:59\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_39_timestamp actionDetails_40_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:10:00        2024-05-27 18:10:41\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_41_timestamp actionDetails_42_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:10:41        2024-05-27 18:12:15\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_43_timestamp actionDetails_44_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:12:52        2024-05-27 18:12:54\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n##   actionDetails_45_timestamp actionDetails_46_timestamp\n## 1                       &lt;NA&gt;                       &lt;NA&gt;\n## 2                       &lt;NA&gt;                       &lt;NA&gt;\n## 3                       &lt;NA&gt;                       &lt;NA&gt;\n## 4        2024-05-27 18:17:30        2024-05-27 18:17:30\n## 5                       &lt;NA&gt;                       &lt;NA&gt;\n## 6                       &lt;NA&gt;                       &lt;NA&gt;\n\nPasst!\n\n\n\nHaben wir schon automatisch oben miterledigt.\n\n\n\nHm, wo ist diese Information? Ah, in den URLs ist sie versteckt…\nSchauen Sie mal z.B. hier:\n\nd_time_repaired |&gt; \n  select(actionDetails_0_subtitle) |&gt; \n  filter(str_detect(actionDetails_0_subtitle, \"developer\")) \n##                                                                 actionDetails_0_subtitle\n## 1 https://hans.th-nuernberg.de/?evalId=none&user=pixi24%40th-nuernberg.de&role=developer\n## 2 https://hans.th-nuernberg.de/?evalId=none&user=pixi24%40th-nuernberg.de&role=developer\n\nAnalog für Admins und Lecturer:\n\nd_time_repaired |&gt; \n  select(actionDetails_0_subtitle) |&gt; \n  filter(str_detect(actionDetails_0_subtitle, \"lecturer\")) \n##                                                                                        actionDetails_0_subtitle\n## 1                         https://hans.th-nuernberg.de/?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 2 https://th-nuernberg.de&password=wv3o4aaixav7u3/login?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 3                         https://hans.th-nuernberg.de/?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 4                         https://hans.th-nuernberg.de/?evalId=none&user=demo24%40th-nuernberg.de&role=lecturer\n## 5                               Category: \"click_videocard_search_lecturer', Action: \"Prof. Dr. Irmtraud Horst\"\n## 6         https://hans.th-nuernberg.de/login?evalId=none&user=wi.professor.quame1%40hs-ansbach.de&role=lecturer\n\nDiese Zeilen sollen (wollen?) wir also entfernen:\n\nd_students_only &lt;-\nd_time_repaired |&gt; \n  filter(!str_detect(actionDetails_0_subtitle, \"developer|lecturer|admin\")) \n\nDer vertikale Balken | steht für das logische “Oder” in Regex.",
    "crumbs": [
      "Lösung 03"
    ]
  },
  {
    "objectID": "challenge03-solution.html#fazit",
    "href": "challenge03-solution.html#fazit",
    "title": "Challenge 03 – Solution",
    "section": "",
    "text": "Speichern wir das resultierende Objekt ab, damit wir für künftige Aufgaben damit weiterarbeiten können.\n\nwrite_rds(d_students_only, \"data-processed/d_no_students.rds\")\nwrite_csv(d_students_only, \"data-processed/d_no_students.csv\")",
    "crumbs": [
      "Lösung 03"
    ]
  }
]