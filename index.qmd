---
title: "Hans-Hackathon"
author: Sebastian Sauer
date: today
toc: true
---

# Willkommen zum Projekt "Hans-Hackathon"!



Come to the HaNS-Side: we have [videos](https://www.youtube.com/watch?v=HAjXzW2v7OA).

## Gegenstand und Ziel

In diesem Modul analysieren Sie die Klickdaten zum KI-Tool [HaNS](https://www.th-nuernberg.de/einrichtungen-gesamt/in-institute/zentrum-fuer-kuenstliche-intelligenz-kiz/projekte/hans/).

Ziel ist es, das Tool HaNS zu evaluieren. Die Klickdaten sollen genutzt werden, um den Nutzen des Tools für die Studierenden besser einschätzen zu können. Darüber hinaus soll verstanden werden, wie Studierende das Tool zum Lernen nutzen, und wie das Tool verbessert werden kann, um das Lernen noch erfolgreicher zu gestalten.


## Kursaufbau und Didaktik 

Der grundlegende Aufbau ist, dass den Studierenden jede Woche eine "Challenge" ("Herausforderung", im Sinne eines Aufgabenpakets) präsentiert wird, die bis zur nächsten Woche gelöst werden soll.

Im Unterricht wird Material, das zur Lösung der Aufgabe nötig ist, besprochen oder es wird auf das Material verwiesen. 
In der folgenden Stunde stellt die Lehrkraft dann eine Musterlösung vor und bespricht die von den Studierenden eingereichte Lösung.
Dann wird wiederum eine neue Challenge angegangen usw.



    

## Modulverlauf 

@tbl-modulverlauf gibt einen Überblick, welches Thema in welcher Woche bzw. wann behandelt wird. 
Pro Woche wird ein Thema behandelt.

:::{.callout-tip}
Es ist nützlich für Sie, die Tabelle @tbl-modulverlauf immer mal wieder zu konsultieren, damit sie wissen, welche Themen als nächstes behandelt werden. $\square$
:::

```{r}
#| echo: false
#| label: tbl-modulverlauf
#| tbl-cap: "Themen des Moduls im Zeitverlauf"
zeitplan <- 
  tibble::tribble(
    ~KW, ~Jahr, ~Wochenstart,  ~`VL-frei`,         ~Thema,        ~Kommentar,
    40L, 2024L, "2024-09-30", "teilweise",     "entfällt",        "entfällt",
    41L, 2024L, "2024-10-07",      "nein",     "Einstieg",                NA,
    42L, 2024L, "2024-10-14",      "nein",  "Challenge 1",                NA,
    43L, 2024L, "2024-10-21",      "nein",  "Challenge 2",                NA,
    44L, 2024L, "2024-10-28", "teilweise",  "Challenge 3",                NA,
    45L, 2024L, "2024-11-04",      "nein",  "Challenge 4",                NA,
    46L, 2024L, "2024-11-11",      "nein",  "Challenge 5",                NA,
    47L, 2024L, "2024-11-18",        "ja",            "-",      "Blockwoche",
    48L, 2024L, "2024-11-25",      "nein",  "Challenge 6",                NA,
    49L, 2024L, "2024-12-02",      "nein",  "Challenge 7",                NA,
    50L, 2024L, "2024-12-09",      "nein",  "Challenge 8",                NA,
    51L, 2024L, "2024-12-16",      "nein",  "Challenge 9",                NA,
    52L, 2024L, "2024-12-23",        "ja",            "-", "Weihnachtspause",
     1L, 2025L, "2024-12-30",        "ja",            "-", "Weihnachtspause",
     2L, 2025L, "2025-01-06", "teilweise", "Challenge 10",                NA,
     3L, 2025L, "2025-01-13",      "nein",     "Ausstieg",                NA,
     4L, 2025L, "2025-01-20",        "ja",             NA,    "Prüfungszeit",
     5L, 2025L, "2025-01-27",        "ja",             NA,    "Prüfungszeit"
    )

 
  
gt::gt(zeitplan) 
# 
# |> 
#   gt::cols_width(
#     1 ~ gt::pct(5),
#     2 ~ gt::pct(20),
#     3 ~ gt::pct(20),
#     4 ~ gt::pct(45)
#   )
```





## Hinweise


:::{.callout-important}
Prüfen Sie vor Beginn der ersten Challenge, ob Sie auf die Daten zugreifen können und diese einlesen können. $\square$
:::

- Programmieren Sie in R.
- Chatbots wie ChatGPT können Ihnen helfen, Ihre Idee in Code umzusetzen.
- Wiederholen Sie die Grundlagen des Datenjudos.
- Dieses Modul ist sehr angewandt; theoretische Konzepte stehen nicht im Vordergrund. Stattdessen geht es darum praktische Probleme zu lösen. In solchen Situationen geht Probieren über Studieren.


## Abgabeformat

Reichen Sie Ihre Ergebnisse in Form eines Dokuments ein,

- das die Lösung der Challenge enthält,
- das Ihren Code enthält (mit Syntax-Highlighting),
- das Ihre Ergebnisse enthält,
- das Ihre Gedanken und Überlegungen enthält,
- das übersichtlich und ansprechend formatiert ist,
- das in RMarkdown oder Quarto erstellt wurde,
- das "Standalone" lesbar ist, also keine Abhängigkeiten zu anderen Dokumenten benötigt
- das als PDF- oder HTML-Datei formatiert ist.

## Schöner Programmieren


- Schreiben Sie Ihren Code in kleine, in sich abgeschlossene Abschnitte.
- Gliedern Sie Ihren Code in Funktionen.
- Schreiben Sie nicht "hardcoded", sondern verwenden Sie allgemeinere, wiederverndbare, flexible Strukturen.
- Finden Sie prägnante Namen für Ihre Objekte.
- Kommentieren Sie Ihren Code.
- Nutzen Sie RMarkdown und/oder Quarto, um Ihren Code und Ihre Ergebnisse zu dokumentieren.
- Nutzen Sie Git und GitHub, um Ihren Code zu versionieren und zu teilen.
- Nutzen Sie möglichst einfach verständlichen Code.
- Nutzen Sie bewährte R-Pakete, um Ihre Arbeit zu erleichtern.
- Nutzen Sie die Tidyverse-Philosophie, um Ihren Code zu schreiben.



:::{.exm-einfacher-code}
### Code vereinfachen


```{r}
library(tidyverse)
library(janitor)
data("penguins", package = "palmerpenguins")
```
Datenbeispiel:

```{r}
d <-
  tibble(
    x = c(1, 2, 3, NA, 5),
    y = c(NA, 2, 3, 4, 5),
    z = 1
  )

dim(d)
```

komplizierter Code:

```{r}
d_no_const_cols <- d[, sapply(d, function(col) length(unique(col[!is.na(col)])) > 1)]
dim(d_no_const_cols)
```

Einfacher Code:

```{r}
d_no_const_cols <- d |> select(where(~ n_distinct(.) > 1))
dim(d_no_const_cols)
```



Noch einfachere Code:

```{r}
d_no_const_cols <- d |> remove_constant()  # aus janitor
d_no_const_cols |> dim()
```

```{r}
?remove_constant
```

