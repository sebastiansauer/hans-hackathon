---
title: "Challenge 08 -- Solution Report"
subtitle: "Analyse der Matoma-HaNS-Daten"
date: now
author: Sebastian Sauer

toc: true
number-sections: true

format: 
  html:
    theme: lumen
    embed-resources: true
    toc: true
    toc-location: right
    toc-depth: 3
    number-sections: true
    code-fold: false
    code-summary: "Show the code"
    code-tools: true
    df-print: paged
    
execute: 
  warning: false
  cache: true
---


# Setup

## R-Pakete starten



```{r load-libs}
library(targets)
library(tidyverse)
library(ggokabeito)  # Farben
library(easystats)
library(gt)  # Tabllen 
library(ggfittext)
library(scales)
library(visdat)
```

```{r}
theme_set(theme_minimal())
```


## Daten importieren und inspizieren

### Targets-Objekte laden

```{r tar-load-count-action-type}
tar_load(action_types, store = "mastersolution")
tar_load(data_users_only, store = "mastersolution")
tar_load(actions_per_visit, store = "mastersolution")
tar_load(time_minmax, store = "mastersolution")
tar_load(time_since_last_visit,store = "mastersolution")
tar_load(numeric_id, store = "mastersolution")
tar_load(time_spent, store = "mastersolution")
tar_load(time_duration, store = "mastersolution")
tar_load(time_visit_wday, store = "mastersolution")
tar_load(ai_transcript_clicks_per_month, store = "mastersolution")  # challenge 08
tar_load(llm_per_visit, store = "mastersolution")  # challenge 08
tar_load(ai_llm_per_months, store = "mastersolution")  # challenge 08
tar_load(idvisit_has_llm, store = "mastersolution")  # challenge 08
```



### Dimension

Der Roh-Datensatz verfügt über

- `r nrow(data_users_only)` Zeilen
- `r ncol(data_users_only)` Spalten (Dubletten und Spalten mit Bildern bereits entfernt)

Jede Zeile entspricht einem "Visit".


### Erster Blick


```{r}
data_users_only_head100 <- 
data_users_only %>% 
  select(1:100) %>% 
  slice_head(n = 100) 
```


```{r vis-dat}
data_users_only_head100 %>% 
  visdat::vis_dat()
```


### Namen (1-100)

```{r}
data_users_only_head100 %>% 
  names()
```


### Werte der erst 100 Spalten

```{r}
data_users_only_head100 %>% 
  glimpse()
```



### Datensatz im Lang-Format, Zeilen 1-100

```{r}
numeric_id %>% 
  slice(1:100) |> 
  gt()
```




## Zeitraum 


### Beginn/Ende der Daten





```{r time-min-max}
time_minmax |> 
  summarise(time_min = min(time_min),
            time_max = max(time_max)) |> 
  gt()
```



### Days since last visit

```{r days-since-last-visit}
time_since_last_visit <-
time_since_last_visit |>
  mutate(days_since_last_visit = as.numeric(days_since_last_visit))

time_since_last_visit |>
  datawizard::describe_distribution(days_since_last_visit) |>
  knitr::kable()

time_since_last_visit |>
  ggplot(aes(x = days_since_last_visit)) +
  geom_density()
```



## Anzahl Visits



```{r}
glimpse(action_types)
```




```{r}
action_types$id_visit |> unique() |> length()
```




## Anzahl der Aktionen pro Visit




`action_count` fasst die Nummer der Aktion innerhalb eines bestimmten Visits.
`type` gibt den Typ der protokollierten Aktion an, z.B. ob es ein Timestamp war.

### Mit allen Daten (den 499er-Daten)



```{r}
actions_per_visit |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)
```

`nr_max` gibt den Maximalwert von `nr` zurück, sagt also, wie viele Aktionen maximal von einem Visitor ausgeführt wurden.

Betrachtet man die Anzahl der Aktionen pro Visitor näher, so fällt auf, dass der Maximalwert (499) sehr häufig vorkommt:

```{r}
actions_per_visit |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_col()
```

Hier noch in einer anderen Darstellung:

```{r}
actions_per_visit |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_point()
```

Der Maximalwert ist einfach auffällig häufig:


```{r}
actions_per_visit |> 
  count(nr_max == 499) |> 
  gt()
```


Es erscheint plausibel, dass der Maximalwert alle "gekappten" (zensierten, abgeschnittenen) Werte fasst, also viele Werte, die eigentlich größer wären (aber dann zensiert wurden).

### Nur Visitors, für die weniger als 500 Aktionen protokolliert sind


```{r}
actions_per_visit2 <- 
actions_per_visit |> 
  filter(nr_max != 499) 

actions_per_visit2 |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)
```

## Verteilung

### Mit den 499er-Daten

```{r plot-count-action}
actions_per_visit_avg = mean(actions_per_visit$nr_max)
actions_per_visit_sd = sd(actions_per_visit$nr_max)

actions_per_visit |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = actions_per_visit_avg,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = actions_per_visit_avg-actions_per_visit_sd,
               y = 0,
               xend = actions_per_visit_avg + actions_per_visit_sd,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = actions_per_visit_avg, y = 1500, label = "MW") +
  annotate("label", x = actions_per_visit_avg + actions_per_visit_sd, y = 0, label = "SD")
  #geom_label(aes(x = actions_per_visit_avg), y = 1, label = "Mean")
```



- Mittelwert der Aktionen pro Visit: `r round(actions_per_visit_avg, 2)`.
- SD der Aktionen pro Visit: `r round(actions_per_visit_sd, 2)`.


### Ohne 499er-Daten

```{r plot-count-action-2}
actions_per_visit_avg2 = mean(actions_per_visit2$nr_max)
actions_per_visit_sd2 = sd(actions_per_visit2$nr_max)

actions_per_visit2 |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       title = "Verteilung der User-Aktionen pro Visit",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = actions_per_visit_avg2,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = actions_per_visit_avg-actions_per_visit_sd2,
               y = 0,
               xend = actions_per_visit_avg2 + actions_per_visit_sd2,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = actions_per_visit_avg2, y = 1500, label = "MW", vjust = "top") +
  annotate("label", x = actions_per_visit_avg2 + actions_per_visit_sd2, y = 0, label = "SD", vjust = "bottom")
  #geom_label(aes(x = actions_per_visit_avg), y = 1, label = "Mean")
```



- Mittelwert der Aktionen pro Visit: `r round(actions_per_visit_avg2, 2)`.
- SD der Aktionen pro Visit: `r round(actions_per_visit_sd2, 2)`.


# Wieviel Zeit verbringen die Nutzer pro Visit?

Die Visit-Zeit wurde auf 600 Min. trunkiert/begrenzt.

```{r load-time-spent}
time_spent <- 
  time_spent |> 
  mutate(t_min = as.numeric(time_diff, units = "mins")) |> 
  filter(t_min < 600)
```

## Verweildauer-Statistiken in Sekunden

```{r comp-diff-time-stats}
time_spent |> 
  summarise(
    mean_time_diff = round(mean(time_diff), 2),
    sd_time_diff = sd(time_diff),
    min_time_diff = min(time_diff),
    max_time_diff = max(time_diff)
  ) |> 
  summarise(
    mean_time_diff_avg = mean(mean_time_diff),
    sd_time_diff_avg = mean(sd_time_diff, na.rm = TRUE),
    min_time_diff_avg = mean(min_time_diff),
    max_time_diff_avg = mean(max_time_diff)
  ) |> 
  gt() |> 
  fmt_number(columns = everything(),
             decimals = 2)
```


```{r time-duration}
time_duration |> 
  summarise(duration_sec_avg = mean(visit_duration_sec, na.rm = TRUE))  |> 
  mutate(duration_min_avg = duration_sec_avg / 60)
```



## Verweildauer-Statistiken in Minuten

```{r time-spent-tbl}
time_spent |> 
  summarise(
    mean_t_min = mean(t_min),
    sd_t_min = sd(t_min),
    min_t_min = min(t_min),
    max_t_min = max(t_min)
  ) |> 
   summarise(
    mean_t_min_avg = mean(mean_t_min),
    sd_t_min_avg = mean(sd_t_min, na.rm = TRUE),
    min_t_min_avg = mean(min_t_min),
    max_t_min_avg = mean(max_t_min)
  ) |>
  gt() |> 
  fmt_number(columns = everything(),
             decimals = 2)
```

## Visualisierung der Verweildauer

### bins=20

```{r plot-time-spent1}
time_spent |> 
  ggplot(aes(x = t_min)) +
  geom_histogram() +
  scale_x_time() +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in HaNS pro Visit in Minuten")
```



### bins=100

```{r plot-time-spent2}
time_spent |> 
  ggplot(aes(x = t_min)) +
  geom_histogram(binwidth = 5) +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in Minuten",
       title = "Verweildauer in HaNS pro Visit",
       caption = "binwidth = 5 Min.")
```

### Zeitdauer begrenzt auf 1-120 Min.

```{r plot-time-spent3}
time_spent2 <- 
time_spent |> 
  filter(t_min > 1, t_min < 120) 

time_spent2 |> 
  ggplot(aes(x = t_min)) +
  geom_histogram(binwidth = 10) +
  theme_minimal() +
  labs(y = "n",
       x = "Verweildauer in HaNS pro Visit in Minuten",
       title = "Verweildauer begrenzt auf 1-120 Minuten",
       caption = "bindwidth = 10 Min.")
```





# An welchen Tagen und zu welcher Zeit kommen die User zu HaNS?

## Setup




```{r}
# Define a vector with the names of the days of the week
# Note: Adjust the start of the week (Sunday or Monday) as per your requirement
days_of_week <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

# Replace numbers with day names
time_visit_wday$dow2 <- factor(days_of_week[time_visit_wday$dow],
                               levels = days_of_week)
```



## HaNS-Login nach Uhrzeit

```{r vis-hans-login-hour}
time_visit_wday |> 
  as_tibble() |> 
  count(hour) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(
    title = "HaNS-Nutzer sind keine Frühaufsteher",
    x = "Uhrzeit",
    y = "Anteil"
  )
 # coord_polar()
```




```{r vis-hans-login-hour-polar}
time_visit_wday |> 
  as_tibble() |> 
  count(hour) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  theme_minimal() +
  coord_polar()
```



## Verteilung der HaNS-Besuche nach Wochentagen



```{r vis-hans-login-wday-bar}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = dow2, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen",
       x = "Wochentag",
       y = "Anteil")
 # coord_polar()
```




```{r vis-hans-login-wday-polar}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = dow2, y = prop)) +
  geom_col() +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen",
       x = "Wochentag",
       y = "Anteil")  +
  coord_polar()
```


### HaNS-Login nach Wochentagen Uhrzeit




```{r vis-hans-login-wday-hour}
time_visit_wday |> 
  as_tibble() |> 
  count(dow2, hour) |> 
  group_by(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  facet_wrap(~ dow2) +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen und Uhrzeiten",
       x = "Wochentag",
       y = "Anteil")
 # coord_polar()
```



```{r vis-hans-login-wday-hour-polar}
#| fig-width: 9
#| fig-asp: 1.5
time_visit_wday |> 
  as_tibble() |> 
  count(dow2, hour) |> 
  group_by(dow2) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(aes(x = hour, y = prop)) +
  geom_col() +
  facet_wrap(~ dow2) +
  theme_minimal() +
  labs(title = "Verteilung der HaNS-Logins nach Wochentagen und Uhrzeiten",
       x = "Wochentag",
       y = "Anteil") +
  coord_polar()
```

## Anzahl der Visits nach Datum (Tagen) und Uhrzeit (bin2d)

```{r}
time2 <- 
time_visit_wday |> 
  ungroup() |> 
  mutate(date = as.Date(date_time))

time2 |> 
  ggplot(aes(x = date, y = hour)) +
  geom_bin2d(binwidth = c(1, 1)) + # (1 day, 1 hour)
  scale_x_date(date_breaks = "1 month") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c() +
  labs(caption = "Each x-bin maps to one week")
 
```


## Anzahl der Visits nach Datum (Wochen) und Uhrzeit (bin2d)


```{r}
time2 |> 
  ggplot(aes(x = date, y = hour)) +
  geom_bin2d(binwidth = c(7, 1)) +  # 1 week, 1 hour
  scale_x_date(date_breaks = "1 week", date_labels = "%W") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c()  +
  labs(x = "Week number in 2023/2024",
       caption = "Each x-bin maps to one week")
```

## Anzahl der Visits nach Datum (Wochen) und Wochentag (bin2d)





```{r p-visits-day-wday}
time2 |> 
  ggplot(aes(x = date, y = dow)) +
  geom_bin2d(binwidth = c(7, 1)) +  # 1 week, 1 hour
  scale_x_date(date_breaks = "1 week", date_labels = "%W") +
  theme(legend.position = "bottom") +
  scale_fill_viridis_c()  +
  labs(x = "Week number in 2023/2024",
       caption = "Each x-bin maps to one week",
       y = "Day of Week") +
  scale_y_continuous(breaks = 1:7)
```




# Interaktion mit dem LLM



## LLM pro Visit


Gesucht wird nach Zeilen, in denen das Wort "llm" vorkommt.

### Insgesamt

```{r}
llm_per_visit |> 
  count(visit_uses_llm) |> 
  mutate(prop = n/sum(n))
```

### Pro Monat


```{r}
llm_per_visit |> 
  mutate(month = month(min_time)) |> 
  group_by(month) |> 
  summarise(sum(visit_uses_llm))
```


```{r}
llm_per_visit |> 
  mutate(month = month(min_time)) |> 
  group_by(month) |> 
  summarise(n = sum(visit_uses_llm)) |> 
  ggplot(aes(x = month, y = n)) +
  geom_col() +
  scale_x_continuous(breaks = 1:6)
```


## Wie oft wird (pro Monat) ein AI transcript angefordert?


### Insgesamt

Es wurde sehr selten ein AI Transcript angefordert.

```{r}
ai_transcript_clicks_per_month |> 
  count(clicks_transcript_any) |> 
  mutate(prop = n / sum(n))
  
```

### Pro Monat



```{r}
ai_transcript_clicks_per_month |> 
  group_by(year_month) |> 
  summarise(prop = sum(clicks_transcript_any) / n()) 
```

```{r}
ai_transcript_clicks_per_month |> 
  group_by(year_month) |> 
  summarise(prop = sum(clicks_transcript_any) / n()) |> 
  ggplot(aes(x = year_month, y = prop)) +
  geom_col()
```


```{r}
ai_transcript_clicks_per_month |> 
  group_by(year_month) |> 
  count(clicks_transcript_any) |> 
  ggplot(aes(x = year_month, y = n, fill = clicks_transcript_any)) +
  geom_col(position = "dodge")
```


## Wie oft wird (pro Monat) mit dem LLM interagiert?


### Insgesamt


```{r}
ai_llm_per_months |> 
  ungroup() |> 
  summarise(sum(n))
```



```{r}
ai_llm_per_months |> 
  ggplot(aes(x = year_month, y = n)) +
  geom_col()
```



## Welcher Anteil der Besucher (visitors) interagiert mit dem LLM?


### Insgesamt

```{r}
idvisit_has_llm |> 
  count(uses_llm) |> 
  mutate(prop = n / sum(n))
```


```{r}
idvisit_has_llm |>
  ggplot(aes(x  = uses_llm)) +
  geom_bar()
```


```{r}
idvisit_has_llm |> 
  ggplot(aes(fill = uses_llm, x = 1)) +
  geom_bar(position = "fill")
```


### Pro Monat


```{r}
idvisit_has_llm |> 
  group_by(year_month) |> 
  count(uses_llm)
```




```{r}
idvisit_has_llm |> 
  group_by(year_month) |> 
  count(uses_llm) |>
  ggplot(aes(x  = year_month, fill = uses_llm, y = n)) +
  geom_col(position = "fill")
```


