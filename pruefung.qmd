

# Prüfung

## Allgemeines

Es handelt sich um eine Einzelleistung.


## Prüfungsleistung: Portfolio-Prüfung



### Beschreibung

Die Prüfungsleistung dieses Moduls ist eine *Portfolioprüfung*.

Nach §17 Absatz 4, Satz 2 ff der APO der HS Ansbach (vom 9. Februar 2023):

>   Eine Portfolioprüfung ist eine modulbezogene Prüfungsleistung, die mehrere Prüfungsbestandteile umfasst, welche über die gesamte Lehrveranstaltung eines Moduls hinweg abgeprüft werden. ³Die einzelnen Prüfungsbestandteile ergeben eine Gesamtnote.


### Bestandteile


Die Portfolioprüfung setzt sich aus folgenden Teilnoten zusammen:

1. Teilnoten für die 10 Challenges
2. Teilnote für ein abschließendes Fachgespräch


Die (Gesamt-)Note setzt sich aus folgenden Teilen zusammen:

- Teilnote 1: Punktzahl bei den Challenges (50%)
- Teilnote 2: Note beim Fachgespräch (50%)


:::{.callout-note}
Jede Teilnote darf nicht schlechter als 4,0 bewertet werden, um die Prüfung als Ganze zu bestehen.
:::


## Teil 1: Wöchentliche Challenges

### Benotung der Challenges

Jede Challenge wird wie folgt bepunktet:

- 0 Punkte: nicht eingereicht oder keine substanzielle Lösungsansätze
- 0,5 Punkte: substanzielle Lösungsansätze eingereicht, aber nicht komplett gelöst
- 1 Punkt: komplett oder fast komplett gelöst


Punkte-Noten-Zuordnung:


- mind. 50% der Punkte - Note 4,0
- mind. 60% der Punkte  - Note 3,0
- mind. 70% der Punkte - Note 2,0
- mind. 80% der Punkte - Note 1,0



### Formalia

- Wird eine Lösung für eine bestimmte Challenge nicht *frist- und formgerecht eingereicht*, so gilt sie als nicht eingereicht (0 Punkte).
- Die *Bearbeitungszeit jeder Challenge ist jeweils eine Woche*,
d.h. die Lösung muss bis zum jeweiligen Abgabetermin eingereicht werden. Der Abgabetermin ist der Vorabend des nächsten Unterrichtstermin. Beispiel: Der Unterricht findet wöchentlich am Dienstag statt. Die Challenge wird am heutige Dienstag besprochen und muss bis Montagabend der nächsten Woche eingereicht werden. Ausnahmen von dieser Regel (z.B. bei Feiertagen) werden rechtzeitig bekannt gegeben.
- Prüfen Sie vor Beginn der ersten Challenge, ob Sie auf die Daten zugreifen können und diese einlesen können. 


### Tipps

- Programmieren Sie in R.
- Chatbots wie ChatGPT können Ihnen helfen, Ihre Idee in Code umzusetzen.
- Wiederholen Sie die Grundlagen des Datenjudos.
- Dieses Modul ist sehr angewandt; theoretische Konzepte stehen nicht im Vordergrund. Stattdessen geht es darum, praktische Probleme zu lösen. In solchen Situationen geht Probieren (oft) über Studieren.


### Abgabeformat


Sofern das Ausgabeformat "Quarto" definiet ist, 
reichen Sie Ihre Ergebnisse bitte in Form eines Dokuments ein,

- das die *Lösung* der Challenge enthält,
- das Ihren *Computer-Code* enthält (mit Syntax-Highlighting),
- das Ihre *Ergebnisse* enthält,
- das Ihre *Gedanken* und Überlegungen (also Text, angereichert ggf. mit Diagrammen etc.) enthält,
- das übersichtlich und ansprechend *formatiert* ist,
- das in RMarkdown oder Quarto erstellt wurde,
- das die *Grundlagen wissenschaftlichen Arbeitens* beachtet,
- das "*Standalone*" lesbar ist, also keine Abhängigkeiten zu anderen Dokumenten benötigt
- das als *PDF*- oder *HTML*-Datei formatiert ist.


Sofern als Ausgabeformat "R-Syntax" definiert ist, reichen Sie Ihren Code bitte in Form eines R-Skripts ein, 

- das die *Lösung* der Challenge enthält.
- *reproduziearbar* ist
- *durchläuft*, ohne Fehler zu werfen
- *kommentiert* ist
- wohl *gegliedert* ist


### Schöner Programmieren


- Schreiben Sie Ihren Code in kleine, *in sich abgeschlossene Abschnitte*.
- Gliedern Sie Ihren Code in *Funktionen.*
- Schreiben Sie *nicht "hardcoded"*, sondern verwenden Sie allgemeinere, wiederverndbare, flexible Strukturen.
- Finden Sie *prägnante Namen* für Ihre Objekte.
- *Kommentieren* Sie Ihren Code.
- Nutzen Sie RMarkdown und/oder *Quarto*, um Ihren Code und Ihre Ergebnisse zu dokumentieren.
- Nutzen Sie *Git* und GitHub, um Ihren Code zu versionieren und zu teilen.
- Nutzen Sie möglichst *einfach verständlichen Code*; schreiben Sie in erster Linie für Menschen, und erst in zweiter Linie für Maschinen.
- Nutzen Sie *bewährte R-Pakete*, um Ihre Arbeit zu erleichtern.
- Nutzen Sie die *Tidyverse-Philosophie*, um Ihren Code zu schreiben.



:::{.exm-einfacher-code}
### Code vereinfachen


```{r}
library(tidyverse)
library(janitor)
data("penguins", package = "palmerpenguins")
```
Datenbeispiel:

```{r}
d <-
  tibble(
    x = c(1, 2, 3, NA, 5),
    y = c(NA, 2, 3, 4, 5),
    z = 1
  )

d
```

Komplizierter Code:

```{r}
d_no_const_cols <- 
  d[, sapply(d, function(col) length(unique(col[!is.na(col)])) > 1)]
d_no_const_cols
```

Einfacher Code:

```{r}
d_no_const_cols <- 
  d |> select(where(~ n_distinct(.) > 1))
d_no_const_cols
```

Ähnlicher, aber nicht unbedingt einfacherer Code:


```{r}
nicht_alle_gleich <- function(spalte){
  n_distinct(spalte) > 1
}

d |> select(where(nicht_alle_gleich))

```



Sehr einfacher Code:

```{r}
d_no_const_cols <- 
  d |> remove_constant()  # aus janitor
d_no_const_cols
```


Hilfe zur Funktion `remove_constant` erhält man mit `?remove_constant` (das zugehörige Paket, `janitor`, muss dafür geladen sein).
:::





## Teil 2: Fachgespräch


Die Termine für das Fachgespräch liegen in der Prüfungszeit und werden rechtzeitig bekannt gegeben über geeignete Kanäle.

Prüfungsgegenstand sind alle Inhalte aus dem Unterricht.
Ein Schwwerpunkt liegt auf den Musterlösungen sowie den eigenen, selbsteingereichten Lösungen der Challenges.

Weitere Hinweise zum Fachgespräch finden sich im [entsprechenden Kapitel im Hinweisbuch](https://hinweisbuch.netlify.app/045-hinweise-pruefung-fachgespraech-frame).



## Sonstiges

Bitte beachten Sie die allgemeinen Hinweise im [Hinweisbuch](https://hinweisbuch.netlify.app/) besonders die [allgemeinen Prüfungshinweise](https://hinweisbuch.netlify.app/010-hinweise-pruefung-allgemein-frame).

