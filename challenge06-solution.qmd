


# Lösung 06



## Aufgaben


{{< include children/challenge06-base.qmd >}}



## Lösungen

[Hier](https://github.com/sebastiansauer/hans-hackathon/blob/main/challenge06-solution.R) ist eine mögliche Lösung für die Pipeline.

[Hier](https://github.com/sebastiansauer/hans-hackathon/blob/main/challenge06-solution-report.qmd) findet sich eine Quarto-Datei, die die Objekte der Pipeline zusammenfasst und in einem Report darstellt.



Beachten Sie bitte, dass die Targets-Pipeline-Datei `_targets.R` heißen sollte und nur die Pipeline-Funktionen enthalten sollte.


Die Pipeline lassen Sie mit `tar_make()` laufen, [hier](https://github.com/sebastiansauer/hans-hackathon/blob/main/run-pipeline.R) ist ein Beispiel.





    
## Bericht zur Lösung

### R-Pakete starten



```{r load-libs}
library(targets)
library(tidyverse)
library(ggokabeito)  # Farben
library(easystats)
library(gt)  # Tabellen in HTML
#library(ggfittext)
#library(scales)
library(visdat)
```

```{r}
theme_set(theme_minimal())
```


### Daten importieren und inspizieren

*Importieren Sie die zusätzlichen (neu eingestellten) Daten; lassen Sie die Pipeline auf dieser Basis neu durchlaufen.*

Die Pipeline zeigt [in diesem `target`](https://github.com/sebastiansauer/hans-hackathon/blob/main/challenge06-solution.R#L35) das Importieren der Daten.
Die Funktion ist identisch zur früheren Lösung. 
Der einzige Unterschied ist, dass mehr CSV-Dateien importiert werden,
was aber für den Code keinen Unterschied macht.


#### Targets-Objekte laden

Die Objekte sind in der [Pipeline](https://github.com/sebastiansauer/hans-hackathon/blob/main/challenge06-solution.R) definiert.

```{r tar-load-count-action-type}
tar_load(action_types, store = "challenge06")
tar_load(data_users_only, store = "challenge06")
tar_load(actions_per_visit, store = "challenge06")
# tar_load(time_minmax, store = "challenge06")
tar_load(time_since_last_visit,store = "challenge06")
tar_load(numeric_id, store = "challenge06")
```


*Gab es Probleme beim Importieren? Wenn ja, welche? Wie haben Sie diese gelöst?*

Es gab das Problem, dass eine bestimmte Variable nicht in allen CSV-Dateien die gleiche Formatierung (Spaltentyp) hatte. 
Mit der Funktion `fread` kann man das Argument `colClasses = "character"` setzen, so dass alle Spalten als String interpretiert werden, s. [die Pipeline hier](https://github.com/sebastiansauer/hans-hackathon/blob/main/challenge06-solution.R#L48C28-L48C53).
String ist permissiv in dem Sinne, dass viele anderen Datentypen (Integer, Numerisch, Faktor) als String interpretiert werden können.
Damit war das Problem der Fehlermeldung beim Importieren gelöst.


*Wie viel Rechenzeit hat die Pipeline beansprucht?*

In ca. 4-5 Minuten war die Pipeline durchgelaufen.


*Stellen Sie sicher, dass die Spaltennamen einheitlich und im Tidyverse-Stil benannt sind.*

Das kann mit der Funktion `janitor::clean_names` erreicht werden, s. [die Pipeline hier](https://github.com/sebastiansauer/hans-hackathon/blob/main/challenge06-solution.R#L66C26-L66C37).


*Fügen Sie ein Target hinzu, dass einen Quarto-Bericht erstellt.*

Der entsprechende Code ist [hier in der Pipeline](https://github.com/sebastiansauer/hans-hackathon/blob/main/challenge06-solution.R#L140) zu sehen.
Allerdings gab es eine Fehlermeldung, die vermutlich nicht auf einen Fehler im eigenen Code zurückgeht.



#### Dimension

Der Roh-Datensatz verfügt über

- `r nrow(data_users_only)` Zeilen
- `r ncol(data_users_only)` Spalten (Dubletten und Spalten mit Bildern bereits entfernt)

Jede Zeile entspricht einem "Visit".


#### Erster Blick


```{r}
data_users_only_head100 <- 
data_users_only %>% 
  select(1:100) %>% 
  slice_head(n = 100) 
```


```{r vis-dat}
data_users_only_head100 %>% 
  visdat::vis_dat()
```


#### Namen (1-100)

```{r}
data_users_only_head100 %>% 
  names()
```


#### Werte der erst 100 Spalten

```{r}
data_users_only_head100 %>% 
  glimpse()
```



#### Datensatz im Lang-Format, Zeilen 1-100

```{r show-numeric-id}
numeric_id %>% 
  slice(1:100) |> 
  gt()
```




### Zeitraum 


#### Beginn/Ende der Daten





```{r time-min-max}
#| eval: false
# time_minmax |> 
#   summarise(time_min = min(time_min),
#             time_max = max(time_max)) |> 
#   gt()
```



#### Days since last visit

```{r days-since-last-visit}
# time_since_last_visit <-
# time_since_last_visit |>
#   mutate(days_since_last_visit = as.numeric(days_since_last_visit))
# 
# time_since_last_visit |>
#   datawizard::describe_distribution(days_since_last_visit) |>
#   knitr::kable()
# 
# time_since_last_visit |>
#   ggplot(aes(x = days_since_last_visit)) +
#   geom_density()
```



### Anzahl Visits

*Im Quarto-Bericht schreiben Sie, wie viele Visits Ihr Datensatz umfasst.*


```{r}
glimpse(action_types)
```




```{r}
anz_visits <- action_types$id_visit |> unique() |> length()
anz_visits
```


Insgesamt liegen im Datensatz `r anz_visits` vor.



### Anzahl der Aktionen pro Visit


*Schreiben Sie außerdem im Quarto-Bericht, wie viele Aktionen pro Visit stattfinden. Berichten Sie dazu relevante Statistiken und visualisieren Sie die Daten.*


`action_count` fasst die Nummer der Aktion innerhalb eines bestimmten Visits.
`type` gibt den Typ der protokollierten Aktion an, 
z.B. ob es ein Timestamp war.

#### Mit allen Daten (den 499er-Daten)



```{r}
actions_per_visit |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)
```

`nr_max` gibt den Maximalwert von `nr` zurück, sagt also, wie viele Aktionen maximal von einem Visitor ausgeführt wurden.

Betrachtet man die Anzahl der Aktionen pro Visitor näher, so fällt auf, dass der Maximalwert (499) sehr häufig vorkommt:

```{r}
actions_per_visit |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_col()
```

Hier noch in einer anderen Darstellung:

```{r}
actions_per_visit |> 
  count(nr_max) |> 
  ggplot(aes(x = nr_max, y = n)) +
  geom_point()
```

Der Maximalwert ist einfach auffällig häufig:


```{r}
actions_per_visit |> 
  count(nr_max == 499) |> 
  gt()
```


Es erscheint plausibel, dass der Maximalwert alle "gekappten" (zensierten, abgeschnittenen) 
Werte fasst, also viele Werte, die eigentlich größer wären (aber dann zensiert wurden).

#### Nur Visitors, für die weniger als 500 Aktionen protokolliert sind


```{r}
actions_per_visit2 <- 
actions_per_visit |> 
  filter(nr_max != 499) 

actions_per_visit2 |> 
  describe_distribution(nr_max) |> 
  gt() |> 
  fmt_number(columns = where(is.numeric),
             decimals = 2)
```

### Verteilung

#### Mit den 499er-Daten

```{r plot-count-action}
actions_per_visit_avg = mean(actions_per_visit$nr_max)
actions_per_visit_sd = sd(actions_per_visit$nr_max)

actions_per_visit |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = actions_per_visit_avg,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = actions_per_visit_avg-actions_per_visit_sd,
               y = 0,
               xend = actions_per_visit_avg + actions_per_visit_sd,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = actions_per_visit_avg, y = 1500, label = "MW") +
  annotate("label", x = actions_per_visit_avg + actions_per_visit_sd, y = 0, label = "SD")
  #geom_label(aes(x = actions_per_visit_avg), y = 1, label = "Mean")
```



- Mittelwert der Aktionen pro Visit: `r round(actions_per_visit_avg, 2)`.
- SD der Aktionen pro Visit: `r round(actions_per_visit_sd, 2)`.


#### Ohne 499er-Daten

```{r plot-count-action-2}
actions_per_visit_avg2 = mean(actions_per_visit2$nr_max)
actions_per_visit_sd2 = sd(actions_per_visit2$nr_max)

actions_per_visit2 |> 
  ggplot() +
  geom_histogram(aes(x = nr_max)) +
  labs(x = "Anzahl von Aktionen pro Visit",
       y = "n",
       title = "Verteilung der User-Aktionen pro Visit",
       caption = "Der vertikale Strich zeigt den Mittelwert; der horizontale die SD") +
  theme_minimal() +
  geom_vline(xintercept = actions_per_visit_avg2,
             color = palette_okabe_ito()[1]) +
  geom_segment(x = actions_per_visit_avg-actions_per_visit_sd2,
               y = 0,
               xend = actions_per_visit_avg2 + actions_per_visit_sd2,
               yend = 0,
               color = palette_okabe_ito()[2],
               size = 2) +
  annotate("label", x = actions_per_visit_avg2, y = 1500, label = "MW", vjust = "top") +
  annotate("label", x = actions_per_visit_avg2 + actions_per_visit_sd2, y = 0, label = "SD", vjust = "bottom") 
```



- Mittelwert der Aktionen pro Visit: `r round(actions_per_visit_avg2, 2)`.
- SD der Aktionen pro Visit: `r round(actions_per_visit_sd2, 2)`.





